[{"categories":["documentation"],"content":"This article shows the basic Markdown syntax and format.","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:0:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:1:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:2:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:3:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:4:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:5:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"6 Emphasis ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:6:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:6:1","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:6:2","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:6:3","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:6:4","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:7:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"8 Lists ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:8:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:8:1","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:8:2","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) in front of task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:8:3","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"9 Code ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:9:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:9:1","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:9:2","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:9:3","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:9:4","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:10:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"11 Links ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:11:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:11:1","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:11:2","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:11:3","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:12:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The DojocatAlt text \" The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2020-03-11","objectID":"/en/basic-markdown-syntax/:13:0","tags":["Markdown"],"title":"Basic Markdown Syntax","uri":"/en/basic-markdown-syntax/"},{"categories":["documentation"],"content":"Guide to emoji usage.","date":"2020-03-11","objectID":"/en/emoji-support/","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! ⛺ Be back soon. That is so funny! 😂 ","date":"2020-03-11","objectID":"/en/emoji-support/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Emoji Cheat Sheet The emoji cheat sheet is a useful reference for emoji shorthand codes. ","date":"2020-03-11","objectID":"/en/emoji-support/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Smileys \u0026 Emotion Face Smiling icon code icon code 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent Face Affection icon code icon code 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes Face Tongue icon code icon code 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face Face Hand icon code icon code 🤗 hugs 🤔 thinking Face Neutral Skeptical icon code icon code 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face Face Sleepy icon code icon code 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping Face Unwell icon code icon code 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face Face Hat icon code icon code 🤠 cowboy_hat_face Face Glasses icon code icon code 😎 sunglasses 🤓 nerd_face Face Concerned icon code icon code 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face Face Negative icon code icon code 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones Face Costume icon code icon code 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot Cat Face icon code icon code 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat Monkey Face icon code icon code 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil Emotion icon code icon code 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2020-03-11","objectID":"/en/emoji-support/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"People \u0026 Body Hand Fingers Open icon code icon code 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute Hand Fingers Partial icon code icon code 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand Hand Single Finger icon code icon code 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up Hand Fingers Closed icon code icon code 👍 👍 thumbsup 👎 👎 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right Hands icon code icon code 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray Hand Prop icon code icon code ✍️ writing_hand 💅 nail_care 🤳 selfie Body Parts icon code icon code 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips Person icon code icon code 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman Person Gesture icon code icon code 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging Person Role icon code icon code 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman Person Fantasy icon code icon code 👼 angel 🎅 santa 🤶 mrs_claus Person Activity icon code icon code 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men Person Sport icon code icon code 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling Person Resting icon code icon code 🛀 bath 🛌 sleeping_bed Family icon code icon code 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨","date":"2020-03-11","objectID":"/en/emoji-support/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Animals \u0026 Nature Animal Mammal icon code icon code 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints Animal Bird icon code icon code 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl Animal Amphibian icon code icon code 🐸 frog Animal Reptile icon code icon code 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon Animal Marine icon code icon code 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell Animal Bug icon code icon code 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion Plant Flower icon code icon code 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip Plant Other icon code icon code 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2020-03-11","objectID":"/en/emoji-support/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Food \u0026 Drink Food Fruit icon code icon code 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato Food Vegetable icon code icon code 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut Food Prepared icon code icon code 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn Food Asian icon code icon code 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango Food Marine icon code icon code 🦀 crab 🦐 shrimp 🦑 squid Food Sweet icon code icon code 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot Drink icon code icon code 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass Dishware icon code icon code 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2020-03-11","objectID":"/en/emoji-support/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Travel \u0026 Places Place Map icon code icon code 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan Place Geographic icon code icon code 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park Place Building icon code icon code 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty Place Religious icon code icon code ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba Place Other icon code icon code ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent Transport Ground icon code icon code 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction Transport Water icon code icon code ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship Transport Air icon code icon code ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket Hotel icon code icon code 🛎️ bellhop_bell Time icon code icon code ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 Sky \u0026 Weather icon code icon code 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2020-03-11","objectID":"/en/emoji-support/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Activities Event icon code icon code 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket Award Medal icon code icon code 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal Sport icon code icon code ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski Game icon code icon code 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards Arts \u0026 Crafts icon code icon code 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2020-03-11","objectID":"/en/emoji-support/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Objects Clothing icon code icon code 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem Sound icon code icon code 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell Music icon code icon code 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio Musical Instrument icon code icon code 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum Phone icon code icon code 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax Computer icon code icon code 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd Light \u0026 Video icon code icon code 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern Book Paper icon code icon code 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label Money icon code icon code 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart Mail icon code icon code ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box Writing icon code icon code ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil Office icon code icon code 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket Lock icon code icon code 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key Tool icon code icon code 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains Science icon code icon code ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite Medical icon code icon code 💉 syringe 💊 pill Household icon code icon code 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart Other Object icon code icon code 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2020-03-11","objectID":"/en/emoji-support/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Symbols Transport Sign icon code icon code 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage Warning icon code icon code ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard Arrow icon code icon code ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top Religion icon code icon code 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star Zodiac icon code icon code ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus Av Symbol icon code icon code 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off Math icon code icon code ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign Punctuation icon code icon code ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash Currency icon code icon code 💱 currency_exchange 💲 heavy_dollar_sign Keycap icon code icon code #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten Alphabet icon code icon code 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 Geometric icon code icon code 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button Other Symbol icon code icon code ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2020-03-11","objectID":"/en/emoji-support/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"Flags Common Flags icon code icon code 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag Country and Region Flags icon code icon code 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2020-03-11","objectID":"/en/emoji-support/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["documentation"],"content":"GitHub Custom Emoji icon code icon code ⚛ atom :basecamp: basecamp :basecampy: basecampy :bowtie: bowtie :electron: electron :feelsgood: feelsgood :finnadie: finnadie :goberserk: goberserk :godmode: godmode :hurtrealbad: hurtrealbad :neckbeard: neckbeard :octocat: octocat :rage1: rage1 :rage2: rage2 :rage3: rage3 :rage4: rage4 :shipit: shipit squirrel :suspect: suspect :trollface: trollface .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2020-03-11","objectID":"/en/emoji-support/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"/en/emoji-support/"},{"categories":["Documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo.","date":"2020-03-11","objectID":"/en/extended-shortcodes/","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:0:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"1 style Note Hugo extended version is necessary for style shortcode. style is a shortcode to insert custom style in your post. The style shortcode has two positional parameters. The first one is the custom style content, which supports nesting syntax in  SASS and \u0026 referring to this parent HTML element. And the second one is the tag name of the HTML element wrapping the content you want to change style, and whose default value is div. Example style input: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} The rendered output looks like this: This is a right-aligned paragraph. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:1:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"2 link link shortcode is an alternative to Markdown link syntax. link shortcode can provide some other features and can be used in code blocks. The complete usage of local resource references is supported. The link shortcode has the following named parameters: href [required] (first positional parameter) Destination of the link. content [optional] (second positional parameter) Content of the link, default value is the value of href parameter. Markdown or HTML format is supported. title [optional] (third positional parameter) title attribute of the HTML a tag, which will be shown when hovering on the link. class [optional] class attribute of the HTML a tag. rel [optional] Additional rel attributes of the HTML a tag. Example link input: {{\u003c link \"https://assemble.io\" \u003e}} Or {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} Or {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} Or {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} The rendered output looks like this: https://assemble.io mailto:contact@revolunet.com Assemble Example link input with a title: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} Or {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} The rendered output looks like this (hover over the link, there should be a tooltip): Upstage ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:2:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"3 image image shortcode is an alternative to figure shortcode. image shortcode can take full advantage of the dependent libraries of lazysizes and lightgallery.js. The complete usage of local resource references is supported. The image shortcode has the following named parameters: src [required] (first positional parameter) URL of the image to be displayed. alt [optional] (second positional parameter) Alternate text for the image if the image cannot be displayed, default value is the value of src parameter. Markdown or HTML format is supported. caption [optional] (third positional parameter) Image caption. Markdown or HTML format is supported. title [optional] Image title that will be shown when hovering on the image. class [optional] class attribute of the HTML figure tag. src_s [optional] URL of the image thumbnail, used for lightgallery, default value is the value of src parameter. src_l [optional] URL of the HD image, used for lightgallery, default value is the value of src parameter. height [optional] height attribute of the image. width [optional] width attribute of the image. linked [optional] Whether the image needs to be hyperlinked, default value is true. rel [optional] Additional rel attributes of the HTML a tag, if linked parameter is set to true. Example image input: {{\u003c image src=\"lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"lighthouse-small.jpg\" src_l=\"lighthouse-large.jpg\" \u003e}} The rendered output looks like this: Lighthouse (image)\" Lighthouse (image) ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:3:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"4 admonition The admonition shortcode supports 12 types of banners to help you put notice in your page. Markdown or HTML format in the content is supported. Note A note banner Abstract An abstract banner Info A info banner Tip A tip banner Success A success banner Question A question banner Warning A warning banner Failure A failure banner Danger A danger banner Bug A bug banner Example An example banner Quote A quote banner The admonition shortcode has the following named parameters: type [optional] (first positional parameter) Type of the admonition banner, default value is note. title [optional] (second positional parameter) Title of the admonition banner, default value is the value of type parameter. open [optional] (third positional parameter) Whether the content will be expandable by default, default value is true. Example admonition input: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} Or {{\u003c admonition tip \"This is a tip\" false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} The rendered output looks like this: This is a tip A tip banner ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:4:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5 mermaid mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown. Just insert your mermaid code in the mermaid shortcode and that’s it. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.1 Flowchart Example flowchart mermaid input: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:1","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.2 Sequence Diagram Example sequence diagram mermaid input: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:2","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.3 GANTT Example GANTT mermaid input: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:3","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.4 Class Diagram Example class diagram mermaid input: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:4","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.5 State Diagram Example state diagram mermaid input: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:5","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.6 Git Graph Example git graph mermaid input: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:6","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"5.7 Pie Example pie mermaid input: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:5:7","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"6 echarts ECharts is a library helping you to generate interactive data visualization. The basic chart types ECharts supports include line series, bar series, scatter series, pie charts, candle-stick series, boxplot series for statistics, map series, heatmap series, lines series for directional information, graph series for relationships, treemap series, sunburst series, parallel series for multi-dimensional data, funnel series, gauge series. And it’s extremely easy to create a combinition of them with ECharts. Just insert your ECharts option in JSON/YAML/TOML format in the echarts shortcode and that’s it. Example echarts input in JSON format: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"Summary Line Chart\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"Save as Image\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"Email Marketing\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"Affiliate Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"Video Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"Direct View\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"Search Engine\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} The same in YAML format: {{\u003c echarts \u003e}}title:text:Summary Line Charttop:2%left:centertooltip:trigger:axislegend:data:- Email Marketing- Affiliate Advertising- Video Advertising- Direct View- Search Enginetop:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:Save as ImagexAxis:type:categoryboundaryGap:falsedata:- Monday- Tuesday- Wednesday- Thursday- Friday- Saturday- SundayyAxis:type:valueseries:- name:Email Marketingtype:linestack:Totaldata:- 120- 132- 101- 134- 90- 230- 210- name:Affiliate Advertisingtype:linestack:Totaldata:- 220- 182- 191- 234- 290- 330- 310- name:Video Advertisingtype:linestack:Totaldata:- 150- 232- 201- 154- 190- 330- 410- name:Direct Viewtype:linestack:Totaldata:- 320- 332- 301- 334- 390- 330- 320- name:Search Enginetype:linestack:Totaldata:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} The same in TOML format: {{\u003c echarts \u003e}} [title] text = \"Summary Line Chart\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"Save as Image\" [xAxis] type = \"category\" boundaryGap = false data = [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ] [yAxis] type = \"value\" [[series]] name = \"Email Marketing\" type = \"line\" stack = \"Total\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"Affiliate Advertising\" type = \"line\" stack = \"Total\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"Video Advertising\" type = \"line\" stack = \"Total\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"Direct View\" type = \"line\" stack = \"Total\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"Search Engine\" type = \"line\" stack = \"Total\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} The rendered output looks like this: The echarts shortcode has also","date":"2020-03-11","objectID":"/en/extended-shortcodes/:6:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"7 mapbox Mapbox GL JS is a JavaScript library that uses WebGL to render interactive maps from vector tiles and Mapbox styles. The mapbox shortcode has the following named parameters to use Mapbox GL JS: lng [required] (first positional parameter) Longitude of the inital centerpoint of the map, measured in degrees. lat [required] (second positional parameter) Latitude of the inital centerpoint of the map, measured in degrees. zoom [optional] (third positional parameter) The initial zoom level of the map, default value is 10. marked [optional] (fourth positional parameter) Whether to add a marker at the inital centerpoint of the map, default value is true. light-style [optional] (fifth positional parameter) Style for the light theme, default value is the value set in the front matter or the site configuration. dark-style [optional] (sixth positional parameter) Style for the dark theme, default value is the value set in the front matter or the site configuration. navigation [optional] Whether to add NavigationControl, default value is the value set in the front matter or the site configuration. geolocate [optional] Whether to add GeolocateControl, default value is the value set in the front matter or the site configuration. scale [optional] Whether to add ScaleControl, default value is the value set in the front matter or the site configuration. fullscreen [optional] Whether to add FullscreenControl, default value is the value set in the front matter or the site configuration. width [optional] Width of the map, default value is 100%. height [optional] Height of the map, default value is 20rem. Example simple mapbox input: {{\u003c mapbox 121.485 31.233 12 \u003e}} Or {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} The rendered output looks like this: Example mapbox input with the custom style: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/navigation-preview-day-v4\" \"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} Or {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/navigation-preview-day-v4\" dark-style=\"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:7:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"8 music The music shortcode embeds a responsive music player based on APlayer and MetingJS. There are three ways to use it the music shortcode. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:8:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"8.1 Custom Music URL The complete usage of local resource references is supported. The music shortcode has the following named parameters by custom music URL: server [required] URL of the custom music. name [optional] Name of the custom music. artist [optional] Artist of the custom music. cover [required] URL of the custom music cover. Example music input by custom music URL: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"Wavelength.jpg\" \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:8:1","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"8.2 Music Platform URL Automatic Identification The music shortcode has one named parameter by music platform URL automatic identification: auto [required] (first positional parameter) URL of the music platform URL for automatic identification, which supports netease, tencent and xiami music platform. Example music input by music platform URL automatic identification: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} Or {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:8:2","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"8.3 Custom Server, Type and ID The music shortcode has the following named parameters by custom music platform: server [required] (first positional parameter) [netease, tencent, kugou, xiami, baidu] Music platform. type [required] (second positional parameter) [song, playlist, album, search, artist] Type of the music. id [required] (third positional parameter) Song ID, or playlist ID, or album ID, or search keyword, or artist ID. Example music input by custom music platform: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} Or {{\u003c music netease song 1868553 \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:8:3","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"8.4 Other Parameters The music shortcode has other named parameters applying to the above three ways: theme [optional] Main color of the music player, default value is #448aff. fixed [optional] Whether to enable fixed mode, default value is false. mini [optional] Whether to enable mini mode, default value is false. autoplay [optional] Whether to autoplay music, default value is false. volume [optional] Default volume when the player is first opened, which will be remembered in the browser, default value is 0.7. mutex [optional] Whether to pause other players when this player starts playing, default value is true. The music shortcode has the following named parameters only applying to the type of music list: loop [optional] [all, one, none] Loop mode of the music list, default value is none. order [optional] [list, random] Play order of the music list, default value is list. list-folded [optional] Whether the music list should be folded at first, default value is false. list-max-height [optional] Max height of the music list, default value is 340px. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:8:4","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"9 bilibili The bilibili shortcode embeds a responsive video player for bilibili videos. When the video only has one part, only the BV id of the video is required, e.g.: https://www.bilibili.com/video/BV1Sx411T7QQ Example bilibili input: {{\u003c bilibili BV1Sx411T7QQ \u003e}} Or {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} The rendered output looks like this: When the video has multiple parts, in addition to the BV id of the video, p is also required, whose default value is 1, e.g.: https://www.bilibili.com/video/BV1TJ411C7An?p=3 Example bilibili input with p: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} Or {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:9:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"10 typeit The typeit shortcode provides typing animation based on TypeIt. Just insert your content in the typeit shortcode and that’s it. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:10:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"10.1 Simple Content Simple content is allowed in Markdown format and without rich block content such as images and more… Example typeit input: {{\u003c typeit \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: Alternatively, you can use custom HTML tags. Example typeit input with h4 tag: {{\u003c typeit tag=h4 \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:10:1","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"10.2 Code Content Code content is allowed and will be highlighted by named parameter code for the type of code language. Example typeit input with code: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:10:2","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"10.3 Group Content All typing animations start at the same time by default. But sometimes you may want to start a set of typeit contents in order. A set of typeit contents with the same value of named parameter group will start typing animation in sequence. Example typeit input with group: {{\u003c typeit group=paragraph \u003e}} **First** this paragraph begins {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **Then** this paragraph begins {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:10:3","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Documentation"],"content":"11 script script is a shortcode to insert custom  Javascript in your post. Note The script content can be guaranteed to be executed in order after all third-party libraries are loaded. So you are free to use third-party libraries. Example script input: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} You can see the output in the console of the developer tool. ","date":"2020-03-11","objectID":"/en/extended-shortcodes/:11:0","tags":["Shortcodes"],"title":"Extended Shortcodes","uri":"/en/extended-shortcodes/"},{"categories":["Java"],"content":"Java基础语法","date":"2021-02-03","objectID":"/en/java01/","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"Java 核心技术读书笔记——Java基础语法 Java简介 Java 是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。 Java 分为三个体系： JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版） JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版) JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字\"2\"：J2EE更名为Java EE, J2SE更名为Java SE，J2ME更名为Java ME。 ","date":"2021-02-03","objectID":"/en/java01/:0:0","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"1 主要特性 简单性 面向对象 分布式 健壮性 安全性 体系结构中立 可移植性 解释型 高性能 多线程 动态性 ","date":"2021-02-03","objectID":"/en/java01/:1:0","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2 Java语法规范 Java 是面向对象的编程语言，一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。 对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。 方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。 实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。 ","date":"2021-02-03","objectID":"/en/java01/:2:0","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2.1 基本语法 大小写敏感 类名：是以大写字母开头的名词。如果名字由多个单词组成，每个单词的第一个字母都应该大写（这种在一个单词中间使用大写字母的方式称为胳蛇命名法。以其自身为例， 应该写成 CamelCase)。 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名：源代码的文件名必须与公共类的名字相同，并用 .java 作为扩展名。 主方法： public static void main(String[] args) 运行已编译的程序时，Java 虚拟机将从指定类中的 main方法开始执行（这里的“方法”就是 Java 中所说的“ 函数”），因此为了代码能够执行，在类的源文件中必须包含一个 main 方法。 ","date":"2021-02-03","objectID":"/en/java01/:2:1","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2.2 Java 标识符 Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。 所有的标识符都应该以字母（A-Z 或者 a-z）、美元符（$）、或者下划线（_）开始 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合 关键字不能用作标识符 标识符是大小写敏感的 合法标识符举例：age、$salary、_value、__1_value 非法标识符举例：123abc、-salary ","date":"2021-02-03","objectID":"/en/java01/:2:2","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2.3 Java 修饰符 Java 可以使用修饰符来修饰类中方法和属性。主要有两类修饰符： 访问控制修饰符 : default, public , protected, private 非访问控制修饰符 : final, abstract, static, synchronized ","date":"2021-02-03","objectID":"/en/java01/:2:3","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2.4 Java 变量 Java 中主要有如下几种类型的变量 局部变量 类变量（静态变量） 成员变量（非静态变量） ","date":"2021-02-03","objectID":"/en/java01/:2:4","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2.5 Java 关键字 类别 关键字 说明 访问控制 private 私有的 protected 受保护的 public 公共的 类、方法和变量修饰符 abstract 声明抽象 class 类 extends 扩充,继承 final 最终值,不可改变的 implements 实现（接口） interface 接口 native 本地，原生方法（非 Java 实现） new 新,创建 static 静态 strictfp 严格,精准 synchronized 线程,同步 transient 短暂 volatile 易失 程序控制语句 break 跳出循环 case 定义一个值以供 switch 选择 continue 继续 default 默认 do 运行 else 否则 for 循环 if 如果 instanceof 实例 return 返回 switch 根据值选择执行 while 循环 错误处理 assert 断言表达式是否为真 catch 捕捉异常 finally 有没有异常都执行 throw 抛出一个异常对象 throws 声明一个异常可能被抛出 try 捕获异常 包相关 import 引入 package 包 基本类型 boolean 布尔型 byte 字节型 char 字符型 double 双精度浮点 float 单精度浮点 int 整型 long 长整型 short 短整型 变量引用 super 父类,超类 this 本类 void 无返回值 保留关键字 goto 是关键字，但不能使用 const 是关键字，但不能使用 null 空 ","date":"2021-02-03","objectID":"/en/java01/:2:5","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"2.6 Java 注释 Java 中的注释不会出现在可执行程序中。因此，可以在源程序中根据需要添加任意多的注释，而不必担心可执行代码会膨胀。 单行注释 // 长段注释 /* */ 多行注释 /** */ /** * 这是一个多行注释示例 * * ©author ieblYang */ public class FirstSample { /*这是一个长段注释示例*/ public static void main(String[] args) { //这是一个单行注释示例 System.out.println(\"We will not use 'Hello, World!'\"); } } ","date":"2021-02-03","objectID":"/en/java01/:2:6","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"3 数据类型 Java 是一种强类型语言。这就意味着必须为每一个变量声明一种类型: 在 Java 中，一共有 8 种基本类型（ primitive type ),其中有 4 种整型、 2 种浮点类型、 1 种用于表示 Unicode 编码的字符单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。 ","date":"2021-02-03","objectID":"/en/java01/:3:0","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"3.1 整型 整型用于表示没有小数部分的数值，可以是正数也可是负数。Java 提供了 4 种整型。如下表所示： 类型 存储需求 取值范围 默认值 int 4字节 -2147483648 ～ 2147483647 (正好超过 20 亿) 0 short 2字节 -32768 ～ 32767 0 long 8字节 -9223372036854775808 ～ 9223372036854775807 0L byte 1字节 -128 ～ 127 0 ","date":"2021-02-03","objectID":"/en/java01/:3:1","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"3.2 浮点类型 浮点类型用于表示有小数部分的数值。在 Java 中有两种浮点类型，具体内容如下表所示： 类型 存储需求 取值范围 表示 默认值 float 4字节 大约 ± 3.40282347E+38F (有效位数为 6 ~ 7 位） 后缀 F 或 f 0.0f double 8字节 大约 ± 1.79769313486231570E+308 (有效位数为15位） 无后缀或添加后缀 D 或 d 0.0d ","date":"2021-02-03","objectID":"/en/java01/:3:2","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"3.3 char 型 char类型是一个单一的 16 位 Unicode 字符,最小值是 \\u0000（即为 0）,最大值是 \\uffff（即为65535）,char 数据类型可以储存任何字符. ","date":"2021-02-03","objectID":"/en/java01/:3:3","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"3.4 boolean 类型 boolean (布尔）类型有两个值：false（默认值） 和 true, 用来判定逻辑条件整型值和布尔值之间不能进行相互转换。 ","date":"2021-02-03","objectID":"/en/java01/:3:4","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"4 变量 在 Java 中，每个变量都有一个类型（ type)。在声明变量时，变量的类型位于变量名之前。 Java语言支持的变量类型有： 类变量：独立于方法之外的变量，用 static 修饰。 实例变量：独立于方法之外的变量，不过没有 static 修饰。 局部变量：类的方法中的变量。 ","date":"2021-02-03","objectID":"/en/java01/:4:0","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"4.1 变量初始化 声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。 在 Java 中， 变量的声明尽可能地靠近变量第一次使用的地方， 这是一种良好的程序编写风格。 ","date":"2021-02-03","objectID":"/en/java01/:4:1","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"4.2 常量 在 Java 中， 利用关键字 final 指示常量。 关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上,常量名使用全大写。 ","date":"2021-02-03","objectID":"/en/java01/:4:2","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5 运算符 在 Java 中，使用算术运算符 +、 -、 *、 / 表示加、减、 乘、除运算。 当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则，表示浮点除法。 整数的求余操作（有时称为取模）用 ％ 表示。 警告 整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。 ","date":"2021-02-03","objectID":"/en/java01/:5:0","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.1 数值类型之间的转换 ","date":"2021-02-03","objectID":"/en/java01/:5:1","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.2 强制类型转换 强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如： /*直接进行强制类型转换*/ double x * 9.997; int nx = (int) x; //变量 nx 的值为 9。强制类型转换通过截断小数部分将浮点值转换为整型 /*使用 Math_ round 方法对浮点数进行舍入运算，得到最接近的整数*/ double x z 9.997; int nx = (int) Math.round(x); //变量 nx 的值为 9。当调用 round 的时候返回的结果为 long 型,需要使用强制类型转换。 警告 如果试图将一个数值从一种类型强制转换为另一种类型， 而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值。例如，(byte)300 的实际值为 44。 ","date":"2021-02-03","objectID":"/en/java01/:5:2","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.3 结合赋值和运算符 可以在赋值中使用二元运算符，这是一种很方便的简写形式。 x += 4; //等价于 x = x + 4; ","date":"2021-02-03","objectID":"/en/java01/:5:3","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.4 自增与自减运算符 自增运算符：++ 自减运算符：-- 前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。 后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算。 int m = 7; int n = 7; int a = 2 * ++m; // now a is 16, m is 8 int b = 2 * n++; // now b is 14, n is 8 /* 建议不要在表达式中使用 ++, 因为这样的代码很容易让人闲惑，而且会带来烦人的 bug。 */ ","date":"2021-02-03","objectID":"/en/java01/:5:4","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.5 关系和 boolean 运算符 相等：== 不等：!= 小于：\u003c 大于：\u003e 小于等于：\u003c= 大于等于：\u003e= 逻辑“与”：\u0026\u0026 逻辑“或”：|| 逻辑“非”：! 三元运算符：?: /* \u0026\u0026 和 || 运算符是按照“短路”方式来求值的：如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了。*/ x != 0 \u0026\u0026 1 / x \u003e x + y // no division by 0 ，如果 x 等于 0, 那么第二部分就不会计算。 x \u003c y ? x : y //会返回 x 和 y 中较小的一个 ","date":"2021-02-03","objectID":"/en/java01/:5:5","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.6 位运算符 Java 定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。位运算符作用在所有的位上，并且按位运算。 下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13： 操作符 描述 例子 ＆ 如果相对应位都是1，则结果为1，否则为0 (A＆B)，得到12，即 0000 1100 | 如果相对应位都是 0，则结果为 0，否则为 1 （A | B）得到61，即 0011 1101 ^ 如果相对应位值相同，则结果为0，否则为1 （A ^ B）得到49，即 0011 0001 〜 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 (〜A)得到-61，即 1100 0011 « 按位左移运算符。左操作数按位左移右操作数指定的位数。 A \u003c\u003c 2得到240，即 1111 0000 » 按位右移运算符。左操作数按位右移右操作数指定的位数。 A \u003e\u003e 2得到15，即 1111 »\u003e 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 A\u003e\u003e\u003e2得到15，即 0000 1111 ","date":"2021-02-03","objectID":"/en/java01/:5:6","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["Java"],"content":"5.7 括号与运算符级别","date":"2021-02-03","objectID":"/en/java01/:5:7","tags":["Java","JavaVolume"],"title":"Java基础语法","uri":"/en/java01/"},{"categories":["MiniProgram"],"content":"微信小程序自定义showToast图片","date":"2020-05-06","objectID":"/en/miniprogram03/","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"1 引言 ","date":"2020-05-06","objectID":"/en/miniprogram03/:1:0","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"1.1 使用场景 使用场景 在自己制作小程序的过程中，发现小程序自带的wx.showToast很适合做一些提示信息，只是icon仅支持\"success\",“loading\"两个图标，在查找官方文档后我发现，其实wx.showToast是支持自定义图片的，这样一下就方便很多了 ","date":"2020-05-06","objectID":"/en/miniprogram03/:1:1","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"1.2 官方文档 官方文档 官方文档 -\u003e API -\u003e 界面 -\u003e 交互 -\u003e wx.showToast wx.showToast(Object object) 显示消息提示框 参数 Object object 属性 类型 说明 title string 提示的内容 icon string 图标，默认 ‘success’ image string 自定义图标的本地路径，image 的优先级高于 icon duration number 提示的延迟时间,默认1500 mask boolean 是否显示透明蒙层，防止触摸穿透 ，默认：false success function 接口调用成功的回调函数 fail function 接口调用失败的回调函数 complete function 接口调用结束的回调函数（调用成功、失败都会执行） object.icon 的合法值 值 说明 success 显示成功图标，此时 title 文本最多显示 7 个汉字长度 loading 显示加载图标，此时 title 文本最多显示 7 个汉字长度 none 不显示图标，此时 title 文本最多可显示两行 注意 wx.showLoading 和 wx.showToast 同时只能显示一个 wx.showToast 应与 wx.hideToast 配对使用 ","date":"2020-05-06","objectID":"/en/miniprogram03/:1:2","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"2 代码实现 ","date":"2020-05-06","objectID":"/en/miniprogram03/:2:0","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"2.1 app.js // 为方便管理，我们先在 app.js 中定义一个函数 demoToast:function(title,image){ wx.showToast({ title: title, image:'/images/' + image, duration: 2000, mask:true }) }, ","date":"2020-05-06","objectID":"/en/miniprogram03/:2:1","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"2.2 /pages/face/face_login.js // 日后使用中，我们只需要调用 app.js 中的 demoToast 函数就可以使用 const app = getApp(); // 加载中,使用 wx.showLoading wx.showLoading ({ title: \"正在登录\", }) //成功 app.demoToast('测试成功','success.png'); // 失败 app.demoToast('测试失败','fail.png'); ","date":"2020-05-06","objectID":"/en/miniprogram03/:2:2","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"3 效果演示 ","date":"2020-05-06","objectID":"/en/miniprogram03/:3:0","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"3.1 加载中 ","date":"2020-05-06","objectID":"/en/miniprogram03/:3:1","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"3.2 失败 ","date":"2020-05-06","objectID":"/en/miniprogram03/:3:2","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"3.3 成功 ","date":"2020-05-06","objectID":"/en/miniprogram03/:3:3","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"4 参考资料 参考资料 微信小程序官方文档 https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html ","date":"2020-05-06","objectID":"/en/miniprogram03/:4:0","tags":["MiniProgram","showToast"],"title":"微信小程序自定义showToast图片","uri":"/en/miniprogram03/"},{"categories":["MiniProgram"],"content":"微信小程序函数节流，防止多次点击跳转","date":"2020-04-20","objectID":"/en/miniprogram02/","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["MiniProgram"],"content":"1 使用场景 使用场景 在微信小程序中，点击“采集人脸”按钮后需要将相机采集到的照片上传到服务器，并进行人脸识别，在此过程存在一定时间的延迟，用户会误认为点击无效而进行多次点击，最后出现多次跳转页面的情况。 函数节流(throttle)：函数在一段时间内多次触发只会执行第一次，在这段时间结束前，不管触发多少次也不会执行函数。 ","date":"2020-04-20","objectID":"/en/miniprogram02/:1:0","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["MiniProgram"],"content":"2 代码实现 ","date":"2020-04-20","objectID":"/en/miniprogram02/:2:0","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["MiniProgram"],"content":"2.1 /utils/util.js # /utils/util.js function throttle(fn, gapTime) { if (gapTime == null || gapTime == undefined) { gapTime = 1500 } let _lastTime = null // 返回新的函数 return function () { let _nowTime = + new Date() if (_nowTime - _lastTime \u003e gapTime || !_lastTime) { fn.apply(this, arguments) //将this和参数传给原函数 _lastTime = _nowTime } } } ","date":"2020-04-20","objectID":"/en/miniprogram02/:2:1","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["MiniProgram"],"content":"2.2 /pages/face/face_register.wxml \u003cview class='moto-container-collection'\u003e \u003ctext class = 'moto' bindtap=\"open\" type=\"primary\" data-type=\"takePhoto\"\u003e采集人脸\u003c/text\u003e \u003c/view\u003e ","date":"2020-04-20","objectID":"/en/miniprogram02/:2:2","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["MiniProgram"],"content":"2.3 /pages/face/face_register.js //引用util.js const util = require('../../utils/util.js') //1s触发一次 Page({ open: util.throttle(function () { ... }, 1000) }) ","date":"2020-04-20","objectID":"/en/miniprogram02/:2:3","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["MiniProgram"],"content":"3 参考资料 参考资料 该链接中有更加详细的讲解，可以前往学习参考 https://www.cnblogs.com/fps2tao/p/12186523.html ","date":"2020-04-20","objectID":"/en/miniprogram02/:3:0","tags":["MiniProgram","函数节流"],"title":"微信小程序函数节流，防止多次点击跳转","uri":"/en/miniprogram02/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装Mysql数据库","date":"2020-04-18","objectID":"/en/ubuntu-mysql/","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装Mysql数据库，并安装可视化工具WorkBench 系统环境 Ubuntu 16.04 ","date":"2020-04-18","objectID":"/en/ubuntu-mysql/:0:0","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["Ubuntu"],"content":"1 ubuntu安装Mysql # 更新安装源 sudo apt-get update # 安装mysql sudo apt-get install mysql-server # 安装过程中按提示设置root用户的密码 笔记 上述命令会安装以下包： apparmor mysql-client-5.7 mysql-common mysql-server mysql-server-5.7 mysql-server-core-5.7 ","date":"2020-04-18","objectID":"/en/ubuntu-mysql/:1:0","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["Ubuntu"],"content":"2 启动和关闭mysql服务器 # 启动服务器 service mysql start # 关闭服务器 service mysql stop # 确认是否启动成功，若mysql节点处于LiSTEN状态表示启动成功 sudo netstat -tap | grep mysql ","date":"2020-04-18","objectID":"/en/ubuntu-mysql/:2:0","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["Ubuntu"],"content":"3 进入mysql shell界面 mysql -u root -p ","date":"2020-04-18","objectID":"/en/ubuntu-mysql/:3:0","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["Ubuntu"],"content":"4 安装可视化工具mysql-workbench sudo apt-get install mysql-workbench ","date":"2020-04-18","objectID":"/en/ubuntu-mysql/:4:0","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["Ubuntu"],"content":"5 参考资料 笔记 https://blog.csdn.net/weixin_42209572/article/details/98983741 https://blog.csdn.net/bianchengxiaosheng/article/details/78494648 ","date":"2020-04-18","objectID":"/en/ubuntu-mysql/:5:0","tags":["Ubuntu16.04","Mysql","Workbench"],"title":"Ubuntu16.04安装Mysql数据库","uri":"/en/ubuntu-mysql/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸属性业务实战","date":"2020-03-23","objectID":"/en/face12/","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸属性业务实战 ","date":"2020-03-23","objectID":"/en/face12/:0:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"1 人脸属性业务介绍 ","date":"2020-03-23","objectID":"/en/face12/:1:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"1.1 什么是人脸属性 人脸属性指的是根据给定的人脸判断其性别、年龄和表情等 分类问题、回归问题 性别、是否戴眼镜、年轻人、微笑 ","date":"2020-03-23","objectID":"/en/face12/:1:1","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"1.2 常用数据集 常用数据集 UTKFace SCUT-FBP5500 CelebA APPA-REAL AFAD Dataset FER+ NKI ","date":"2020-03-23","objectID":"/en/face12/:1:2","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"2 人脸属性方法介绍 离散值：性别，戴眼镜，戴面纱，种族，表情等 连续值：年龄等 ","date":"2020-03-23","objectID":"/en/face12/:2:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"3 人脸属性方法难点 数据：不同人种，不同年龄，不同性别等等 林志颖、郭德纲年龄差别不大，但从面部很难区分 ","date":"2020-03-23","objectID":"/en/face12/:3:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"4 数据准备 CelebA CelebA是香港中文大学的开放数据，包含10177个名人身份的202599张图片 40个属性 ","date":"2020-03-23","objectID":"/en/face12/:4:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"4.1 数据下载 Google Drive Baidu Drive 4.1.1 说明 下载后会得到三个文件夹和一个 README.txt CelebA中有 10,177人 的 202,599张 图片 ├── Anno │ ├── identity_CelebA.txt │ ├── list_attr_celeba.txt │ ├── list_bbox_celeba.txt │ ├── list_landmarks_align_celeba.txt │ └── list_landmarks_celeba.txt ├── Eval │ └── list_eval_partition.txt ├── Img │ ├── img_celeba.7z │ ├── img_align_celeba.zip │ └── img_align_celeba_png.7z └── README.txt 笔记 identity_CelebA.txt 身份标记：图片名 + 编号，相同编号代表同一人，如：000001.jpg 2880 list_attr_celeba.txt 标记图片属性 list_landmarks_align_celeba.txt 对齐后的图片，人脸标记（眼鼻嘴）lefteye_x lefteye_y righteye_x righteye_y nose_x nose_y leftmouth_x leftmouth_y rightmouth_x rightmouth_y list_landmarks_celeba.txt 自然环境下的图片，人脸标记（眼鼻嘴）lefteye_x lefteye_y righteye_x righteye_y nose_x nose_y leftmouth_x leftmouth_y rightmouth_x rightmouth_y list_eval_partition.txt 分组：训练、验证、测试 4.1.2 下载的图片 img_celeba.7z：纯“野生”文件，也就是从网络爬取的没有做裁剪的图片 img_align_celeba.zip：jpg格式的，比较小（推荐使用，直接解压即可 img_align_celeba_png.7z：把“野生”文件裁剪出人脸部分之后的图片，png格式 4.1.3 list_attr_celeba.txt中属性说明 英文 中文 5_o_Clock_Shadow 胡须 Arched_Eyebrows 柳叶眉 Attractive 有魅力 Bags_Under_Eyes 眼袋 Bald 秃顶 Bangs 刘海 Big_Lips 大嘴唇 Big_Nose 大鼻子 Black_Hair 黑发 Blond_Hair 金发 Blurry 模糊 Brown_Hair 棕色头发 Bushy_Eyebrows 浓眉 Chubby 圆脸 Double_Chin 双下巴 Eyeglasses 戴眼镜 Goatee 山羊胡子 Gray_Hair 白发 Heavy_Makeup 浓妆 High_Cheekbones 高颧骨 Male 男人 Mouth_Slightly_Open 嘴微微张开 Mustache 胡子 Narrow_Eyes 小眼睛 No_Beard 没有胡须 Oval_Face 鸭蛋脸 Pale_Skin 苍白的皮肤 Pointy_Nose 尖鼻子 Receding_Hairline 发际线高 Rosy_Cheeks 红润的脸颊 Sideburns 鬓胡 Smiling 微笑 Straight_Hair 直发 Wavy_Hair 卷发 Wearing_Earrings 戴着耳环 Wearing_Hat 戴着帽子 Wearing_Lipstick 擦口红 Wearing_Necklace 戴着项链 Wearing_Necktie 戴着领带 Young 年轻 ","date":"2020-03-23","objectID":"/en/face12/:4:1","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"4.2 数据处理 对img_celeba.7z.001~img_celeba.7z.014这14个文件进行合并，得到一个img_celeba.7z文件，并解压 # 数据合并 cat img_celeba.7z.0** \u003e img_celeba.7z # 安装 7z sudo apt-get install p7zip-full # 解压 7z x img_celeba.7z ","date":"2020-03-23","objectID":"/en/face12/:4:2","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"5 多任务网络结构 ","date":"2020-03-23","objectID":"/en/face12/:5:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"6 实例代码 ","date":"2020-03-23","objectID":"/en/face12/:6:0","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"6.1 数据集处理 人脸属性的标注信息存储在Anno文件夹下的list_attr_celeba.txt中，从标注文件中可以看出，CelebA数据集中标注了40种人脸属性的信息，系统选取其中的四个属性进行数据打包，分别为是否戴眼镜、性别、是否微笑、是否年轻，这四个属性对应的下标依次为15、20、31、39。 在进行数据打包前，需要先对人脸图片进行适当的处理，在CelebA数据集中，所有的人脸图片存储在Img文件夹下，所有人脸图片又分为三类文件，分别是img_celeba.7z，纯“野生”文件，即从网络上爬取的没有进行裁剪的图片，img_algin_celeba_png.7z，将爬取到的“野生”文件裁剪出人脸部分后的到的图片，并且图片的格式为png格式，img_align_celeba.zip,将爬取到的“野生”文件经过人脸对齐和裁剪后得到的人脸图像，图片的格式为jpg格式，图片比较小，所以系统选用了img_algin_celeba文件中的图片进行处理和模型训练。 在数据集处理中，使用dlib库定义人脸检测器，对数据集中的人脸图片进行人脸检测，若没有发现人脸信息则将这张图片过滤掉，在成功获取到人脸框之后，需要对人脸框进行一定的扩充，对扩充后的人脸框仍然小于50 * 50的人脸图片要将其过滤掉，对数据集中的图片进行过滤的代码如下： if len(rects) == 0: continue x1 = rects[0].left() y1 = rects[0].top() x2 = rects[0].right() y2 = rects[0].bottom() y1 = int(max(y1 - 0.3 * (y2 - y1), 0)) if y2 - y1 \u003c 50 or x2 - x1 \u003c 50 or x1 \u003c 0 or y1 \u003c 0: continue 对符合要求的人脸图片，先进行人脸对齐，将图片裁剪为128 * 128的大小，然后定义tfrecord字典的格式，其中image为byte型，eyeglasses、male、smiling、young为int型，相关代码如下： ex = tf.train.Example( features = tf.train.Features( feature = { \"image\": tf.train.Feature( bytes_list = tf.train.BytesList(value=[im_data.tobytes()]) ), \"Eyeglasses\": tf.train.Feature( int64_list = tf.train.Int64List( value = [int(attr_val[16])] ) ), \"Male\": tf.train.Feature( int64_list = tf.train.Int64List( value = [int(attr_val[21])] ) ), \"Smiling\": tf.train.Feature( int64_list=tf.train.Int64List( value=[int(attr_val[32])] ) ), \"Young\": tf.train.Feature( int64_list = tf.train.Int64List( value = [int(attr_val[40])] ) ) } ) ) 最后，对数据集进行训练集与测试集的划分，其中95%的数据划分为训练集，剩余的5%划分为测试集。 ","date":"2020-03-23","objectID":"/en/face12/:6:1","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"6.2 模型训练 主干网络使用slim提供的inception_v3_base，batch_norm层的参数配置如下： batch_norm_params = { \"is_training\": is_training, \"trainable\": True, \"decay\": 0.9997, \"epsilon\": 0.00001, \"variables_collections\":{ \"beta\": None, \"gamma\": None, \"moving_mean\":[\"moving_vars\"], \"moving_variance\": ['moving_var'] } } 对卷积层和全连接层进行权值上的约束时，正则化方法采用L2正则，并定义这些层是可训练的，对卷积层的参数进行初始化，调用主干网络即inception_v3_base传入图片，获取到inception_v3_base网络的输出结果，使用tf.reduce_mean函数计算张量tensor沿着1、2维度上的平均值。使用tf.nn.dropout函数在训练过程中随机的扔掉一部分神经元，防止或减轻过拟合问题，针对系统研究的四个属性以主干网络的输出为四个分支的输入来定义分支，主要代码如下： weights_regularizer = tf.contrib.layers.l2_regularizer(0.00004) with tf.contrib.slim.arg_scope( [tf.contrib.slim.conv2d, tf.contrib.slim.fully_connected], weights_regularizer = weights_regularizer, trainable = True): with tf.contrib.slim.arg_scope( [tf.contrib.slim.conv2d], weights_initializer = tf.truncated_normal_initializer(stddev=0.1), activation_fn = tf.nn.relu, normalizer_fn = batch_norm, normalizer_params = batch_norm_params): nets, endpoints = inception_v3_base(images) print(nets) print(endpoints) net = tf.reduce_mean(nets,axis=[1,2]) net = tf.nn.dropout(net, drop_out, name = \"droplast\") net = flatten(net, scope=\"flatten\") net_eyeglasses = slim.fully_connected(net, 2, activation_fn = None) net_male = slim.fully_connected(net, 2, activation_fn=None) net_smiling = slim.fully_connected(net, 2, activation_fn=None) net_young = slim.fully_connected(net, 2, activation_fn=None) return net_eyeglasses, net_male, net_smiling, net_young 输入和label定义：网络搭建完成后，定义输入和label，并获取网络的预测结果，对于模型训练设置dropout=0.5，is_training=True，代码如下： input_x = tf.placeholder(tf.float32, shape=[None, 128, 128, 3]) label_eyeglasses = tf.placeholder(tf.int64, shape=[None, 1]) label_male = tf.placeholder(tf.int64, shape=[None, 1]) label_smiling = tf.placeholder(tf.int64, shape=[None, 1]) label_young = tf.placeholder(tf.int64, shape=[None, 1]) Loss的定义：采用交叉熵损失作为模型训练的Loss，对于tf.losses.sparse_softmax_cross_entropy其中labels是一维的， 预测结果是二维的，最后结果选取二维的最大值所对应的索引，即概率分布中最大的值。使用tf.nn.softmax将预测结果处理到0 ~ 1之间，将loss_eyeglasses，loss_male，loss_smiling，loss_young相加来定义总的loss，接着定义正则化的loss，定义loss的代码如下： loss_eyeglasses = tf.losses.sparse_softmax_cross_entropy( labels= label_eyeglasses, logits = logits_eyeglasses) loss_male = tf.losses.sparse_softmax_cross_entropy( labels=label_male, logits = logits_male) loss_smiling = tf.losses.sparse_softmax_cross_entropy( labels = label_smiling, logits = logits_smiling) loss_young = tf.losses.sparse_softmax_cross_entropy( labels = label_young, logits = logits_young) logits_eyeglasses = tf.nn.softmax(logits_eyeglasses) logits_male = tf.nn.softmax(logits_male) logits_smiling = tf.nn.softmax(logits_smiling) logits_young = tf.nn.softmax(logits_young) loss = loss_eyeglasses + loss_male + loss_smiling + loss_young reg_set = tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES) l2_loss = tf.add_n(reg_set) 学习方式与学习率的定义：定义学习率的衰减方式为指数衰减，初始学习率为0.0001，衰减的步长为1000，每次衰减的比率为0.98，相关代码如下： global_step = tf.Variable(0, trainable=True) lr = tf.train.exponential_decay(0.0001, global_step, decay_steps=1000, decay_rate=0.98, staircase=False) 优化器的定义:定义训练的方式为AdamOptimizer，传入学习率和loss，相关代码如下： update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS) with tf.control_dependencies(update_ops): train_op = tf.train.AdamOptimizer(lr).minimize(loss + l2_loss, global_step) 对于训练集使用tf.train.shuffle_batch将队列中的数据打乱后再读取，在数据打包时，各个属性的label值用-1,1来表示，对这些值进行处理，将数据变为0,1，相关代码如下： batch_im = features[\"image\"] batch_eye = (features[\"Eyeglasses\"] + 1) // 2 batch_male = (features[\"Male\"] + 1) // 2 batch_smiling = (features[\"Smiling\"] + 1) // 2 batch_young = (features[\"Young\"] + 1) // 2 batch_im = tf.decode_raw(batch_im, tf.uint8) 模型共训练150000次，并对模型和日志信息进行保存，loss曲线如下图所示： ","date":"2020-03-23","objectID":"/en/face12/:6:2","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"6.3 模型固化 模型前项推理基本与模型训练部分一致，需要注意的是inception_v3函数中的dropout需要修改为1.0，is_training修改为False。 为了使预测结果更直观，调用起来更方便，将softmax值转换成argmax值，得到概率分布值高的所对应的轴，实现代码如下： logits_eyeglasses = tf.nn.softmax(logits_eyeglasses) logits_male = tf.nn.softmax(logits_male) logits_smiling = tf.nn.softmax(logits_smiling) logits_young = tf.nn.softmax(logits_young) logits_eyeglasses = tf.argmax(logits_eyeglasses, axis=1) logits_male = tf.argmax(logits_male, axis=1) logits_smiling = tf.argmax(logits_smiling, axis=1) logits_young = tf.argmax(logits_young, axis=1) 使用convert_variables_to_constants函数将计算图中的变量取值以常量的形式保存。在人脸属性模型的多任务网络中，在模型固化的节点list中放入人脸属性的四个节点的tensor的name，从而转化多任务网络的pb模型，参数配置如下： output_graph_def = tf.graph_util.\\ convert_variables_to_constants(session, session.graph.as_graph_def(), ['ArgMax', 'ArgMax_1', 'ArgMax_2', 'ArgMax_3']) ","date":"2020-03-23","objectID":"/en/face12/:6:3","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"6.4 模型测试 首先，读取打包好的pb文件，进行反序列化，恢复当前的graph。接着，获取需要推理的tensor，分别为pred_eyeglasses、pred_young、pred_male、pred_smiling，使用opencv读取测试图片，使用dlib库定义人脸检测器，提取出人脸框，并进行人脸数据的裁剪，计算当前四个tensor所对应的值，并在控制台打印输出结果，人脸属性模型测试结果如下图所示： ","date":"2020-03-23","objectID":"/en/face12/:6:4","tags":["FaceRecognition","TensorFlow","FaceAttribute"],"title":"人脸属性业务实战","uri":"/en/face12/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 活体检测业务实战","date":"2020-03-22","objectID":"/en/face11/","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 活体检测业务实战 ","date":"2020-03-22","objectID":"/en/face11/:0:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"1 活体检测业务介绍 ","date":"2020-03-22","objectID":"/en/face11/:1:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"1.1 什么是活体检测 为防止恶意者伪造和窃取他人的生物特征用于身份认证 判断提交的生物特征是否来自有生命的个体 ","date":"2020-03-22","objectID":"/en/face11/:1:1","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"1.2 常见判断方式 人脸左转、右转、张嘴、眨眼等 前端：通过“动作+指令”采集数据 后端：对采集到的连续多帧数据进行分析 结果：判断是否完成相应动作 ","date":"2020-03-22","objectID":"/en/face11/:1:2","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"2 活体检测方法介绍 ","date":"2020-03-22","objectID":"/en/face11/:2:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"2.1 传统方法 基于脸部视觉特征的方法： 颜色纹理分析 材料（皮肤、纸面、镜面） 帧差信息 光流算法 脸部形状变化 ","date":"2020-03-22","objectID":"/en/face11/:2:1","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"2.2 深度学习方法 多帧序列分析（CNN+LSTM） 人脸深度图（差异性分析） 3D landmark 多任务网络：人脸检测+人脸分类（真假人脸） ","date":"2020-03-22","objectID":"/en/face11/:2:2","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"2.3 基于Landmark的方法（将用到的） 笔记 输入连续多帧人脸：摄像头不停向后端输送人脸 关键点定位：先进行人脸检测 -\u003e 关键点定位 动作检测：根据指定的动作指令来判定当前的多帧人脸关键点位置坐标的差异，根据坐标的差异判断人脸目前的动作，需要对坐标进行归一化，规避掉大小人脸。 张嘴检测 |嘴巴上部关键点 - 嘴巴下部关键点| \u003e 阈值 眨眼检测 |左眼眼睛上部关键点 - 左眼眼睛下部关键点| \u003e 阈值 |右眼眼睛上部关键点 - 右眼眼睛下部关键点| \u003e 阈值 ","date":"2020-03-22","objectID":"/en/face11/:3:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"3 活体检测问题挑战及解决思路 作弊问题（镜面、视频） 约束场景下的活体检测 3D Landmark End2end的活体检测算法 tracking ","date":"2020-03-22","objectID":"/en/face11/:4:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"4 Dlib 68点人脸检测 ","date":"2020-03-22","objectID":"/en/face11/:5:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["FaceRecognition"],"content":"5 实例代码 人脸关键点及活体检测页面相框会根据识别状态进行静态或动态的变化，用户点击开始后，小程序每1000ms采集一张图片并上传至服务端，根据服务端返回的68个人脸坐标信息，使用canvas将这68个人脸关键点绘制到对应的人脸图片中。 微信小程序利用服务端返回的68个人脸关键点的坐标信息，实现用户的张闭嘴检测和睁闭眼检测。 张闭嘴检测：|嘴巴上部关键点 - 嘴巴下部关键点| \u003e 阈值 睁闭眼检测：|左眼眼睛上部关键点 - 左眼眼睛下部关键点| \u003e 阈值 |右眼眼睛上部关键点 - 右眼眼睛下部关键点| \u003e 阈值 系统经过多次实际测试后，选取第67和第63个点用于张闭嘴检测，并设定阈值为0.03选取图6.7中的第41、第37、第46和第44个点用于睁闭眼状态的检测，并设定阈值为0.03，将识别的结果以emoji图片和文字两种形式，实时显示在页面中，核心代码如下： var diff1 = pos[67 * 4 + 1 ] - pos[63 * 4 + 1]; var diff2 = pos[41 * 4 + 1 ] - pos[37 * 4 + 1]; var diff3 = pos[46 * 4 + 1 ] - pos[44 * 4 + 1]; if(diff1 \u003e 0.03){ if( diff2 \u003c 0.03 \u0026\u0026 diff3 \u003c 0.03){ that.setData({ landmark_img:\"ecmo\"}) }else{ that.setData({ landmark_img:\"eomo\"}) } } if(diff1 \u003c= 0.03){ if( diff2 \u003c 0.03 \u0026\u0026 diff3 \u003c 0.03){ that.setData({ landmark_img:\"ecmc\"}) }else{ that.setData({ landmark_img:\"eomc\"}) } } ","date":"2020-03-22","objectID":"/en/face11/:6:0","tags":["FaceRecognition","TensorFlow","FaceAlignment","FaceBiopsy"],"title":"活体检测业务实战","uri":"/en/face11/"},{"categories":["MiniProgram"],"content":"结合微信小程序官方文档，学习小程序基础必背知识","date":"2020-03-21","objectID":"/en/miniprogram01/","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"结合微信小程序官方文档，学习小程序基础必背知识 ","date":"2020-03-21","objectID":"/en/miniprogram01/:0:0","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"1 什么是微信小程序 ","date":"2020-03-21","objectID":"/en/miniprogram01/:1:0","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"1.1 张小龙这样定义 不需要下载安装即可使用 用户“用完即走”，不用关心是否安装太多应用 应用将无处不在，随时可用 ","date":"2020-03-21","objectID":"/en/miniprogram01/:1:1","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"1.2 小程序特点 小程序适合做简单的、用完即走的应用 小程序适合低频的应用 小程序适合性能要求不高的应用 ","date":"2020-03-21","objectID":"/en/miniprogram01/:1:2","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"2 小程序入门基础知识 小程序文件类型与目录结构 注册小程序页面，View、Text等组件的基本用法 Flex弹性盒子模型 移动端分辨率及小程序自适应单位RPX ","date":"2020-03-21","objectID":"/en/miniprogram01/:2:0","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"2.1 小程序类型与目录结构 ├── app.js ├── app.json ├── app.wxss ├── pages │ │── index │ │ ├── index.wxml │ │ ├── index.js │ │ ├── index.json │ │ └── index.wxss │ └── logs │ ├── logs.wxml │ └── logs.js ├── utils └── project.config.json 笔记 pages 存放页面 文件 作用 举例（英雄联盟） js 逻辑 “技能” wxml 骨架 “英雄” wxss 样式 “皮肤” json 配置 “符文” utils 工具类 app.js 应用程序级别的逻辑 app.json 应用程序级别的配置 app.wxss 应用程序级别的全局样式 project.config.json 项目配置文件 就近原则 页面配置 高于 全局配置 ","date":"2020-03-21","objectID":"/en/miniprogram01/:2:1","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"2.2 注册小程序页面 官方文档 官方文档 -\u003e 框架 -\u003e 小程序配置 -\u003e 全局配置 -\u003e pages app.json -\u003e pages pages 用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名）信息。文件名不需要写文件后缀，框架会自动去寻找对于位置的 .json, .js, .wxml, .wxss 四个文件进行处理。 数组的第一项代表小程序的初始页面（首页）。小程序中新增/减少页面，都需要对 pages 数组进行修改。 { \"pages\": [\"pages/index/index\", \"pages/logs/logs\"] } ","date":"2020-03-21","objectID":"/en/miniprogram01/:2:2","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"2.3 基本组件 2.3.1 view 官方文档 官方文档 -\u003e 组件 -\u003e 视图容器 -\u003e view \u003cview\u003e \u003c/view\u003e 相当于网页中的 \u003cdiv\u003e \u003c/div\u003e 作用：容器、分隔文档 2.3.2 text 官方文档 官方文档 -\u003e 组件 -\u003e 基础内容 -\u003e text 写文本时最好用\u003ctext\u003e \u003c/text\u003e包裹，便于对文件设置样式和添加标签 不建议直接使用\u003cbutton\u003e \u003c/button\u003e，可以使用\u003cview\u003e \u003ctext\u003e 按钮 \u003c/text\u003e \u003c/view\u003e的形式来实现按钮 2.3.3 window 官方文档 官方文档 -\u003e 框架 -\u003e 小程序配置 -\u003e 全局配置 -\u003e window 用于设置小程序的状态栏、导航条、标题、窗口背景色。 { \"window\": { \"navigationBarBackgroundColor\": \"#ffffff\", \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"微信接口功能演示\", \"backgroundColor\": \"#eeeeee\", \"backgroundTextStyle\": \"light\" } } ","date":"2020-03-21","objectID":"/en/miniprogram01/:2:3","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"2.4 Flex弹性盒子模型 Flex弹性盒子模型是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。 目的:是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。 弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。 弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。 弹性容器内包含了一个或多个弹性子元素。 常用属性 .container{ display: flex; flex-direction:column; /*垂直分布*/ align-items: center; /*元素居中*/ } ","date":"2020-03-21","objectID":"/en/miniprogram01/:2:4","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"2.5 移动端分辨率及小程序自适应单位RPX 官方文档 官方文档 -\u003e 指南 -\u003e 小程序框架 -\u003e 视图层 -\u003e wxss 设备 屏幕尺寸 分辨率(pt) Reader 分辨率(px) 渲染后 PPI iPhone 3GS 3.5寸 320x480 @1x 320x480 空 163 iPhone 4/4s 3.5寸 320x480 @2x 640x960 空 326 iPhone 5/5S/5C 4.0寸 320x568 @2x 640x1136 空 326 iPhone 6/6S 4.7寸 375x667 @2x 750x1334 空 326 iPhone 6/6S Plus 5.5寸 414x736 @3x 1242x2208 1080x1920 401 小程序图片默认值 width:300px;height:225px 图片使用px图片不会随机型、分辨率等的变化而变化 图片使用rpx图片会随机型、分辨率等的变化而变化 pt 就是point，是一种固定长度的度量单位，是能够使用测量设备测得的长度，是排版印刷中常用的文字大小单位。 px 就是表示pixel，像素，是屏幕上显示数据的最基本的点。 px可以在计算机屏幕上，能达到预期的效果，在打印机和其它的高分辨率设备上，它又能取得所希望的效果。 px是一个点，它不是自然界的长度单位，谁能说出一个“点”有多长多大么？可以画的很小，也可以很大。如果点很小，那画面就清晰，我们称它为“分辨率高”，反之，就是“分辨率低”。所以，“像素”的大小是会“变”的，也称为“相对长度”。 ppi Pixels Per Inch也叫像素密度，所表示的是每英寸所拥有的像素数量。因此PPI数值越高，即代表显示屏能够以越高的密度显示图像，当然，显示的密度越高，拟真度就越高。 公式表达为 $ PPI=\\sqrt{(X^2+Y^2)} / Z $ $X$：长度像素数； $Y$：宽度像素数； $Z$：屏幕大小 ","date":"2020-03-21","objectID":"/en/miniprogram01/:2:5","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"3 一个简单的页面 ","date":"2020-03-21","objectID":"/en/miniprogram01/:3:0","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"3.1 目录结构 ├── app.js ├── app.json ├── app.wxss ├── images ├── pages │ └── welcome │ ├── welcome.wxml │ ├── welcome.js │ └── welcome.wxss └── project.config.json ","date":"2020-03-21","objectID":"/en/miniprogram01/:3:1","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["MiniProgram"],"content":"3.2 代码展示 app.json { \"pages\": [ \"pages/welcome/welcome\" ], \"window\": { \"navigationBarBackgroundColor\": \"#b3d4db\" }, \"sitemapLocation\": \"sitemap.json\" } app.wxss text{ font-family:MicroSoft Yahei; } welcome.wxml \u003c!-- wxml 是用来编写页面骨架的文件--\u003e \u003c!-- \u003cdiv\u003e 容器 分隔文档 --\u003e \u003cview class=\"container\"\u003e \u003c!-- \u003cimage style=\"width:200rpx; height:200rpx\" src=\"/images/avatar.png\"\u003e\u003c/image\u003e --\u003e \u003cimage class=\"user-avatar\" src=\"/images/avatar.png\"\u003e\u003c/image\u003e \u003c!-- width:300px height:225px --\u003e \u003ctext class=\"user-name\"\u003eHello,World\u003c/text\u003e \u003cview class= \"moto-container\"\u003e \u003ctext class=\"moto\" \u003e开启小程序之旅\u003c/text\u003e \u003c/view\u003e \u003c/view\u003e welcome.js //js不能为空，否则会报错，至少添加空的Page代码 Page({ }) welcome.wxss .container{ display: flex; flex-direction:column; /*垂直分布*/ align-items: center; /*元素居中*/ /*background-color: #b3d4db;*/ } page{ background-color: #b3d4db; height:100%; } .user-avatar{ width:200rpx; height:200rpx; margin-top:160rpx; } .user-name{ font-size:32rpx; font-weight:bold; margin-top:80rpx; /*font-family: MicroSoft Yahei;*/ } .moto{ font-size:22rpx; font-weight:bold; /*font-family: MicroSoft Yahei;*/ line-height: 80rpx; color: #405f80 } .moto-container{ margin-top:200rpx; border:1px solid #405f80; height:80rpx; width:200rpx; border-radius:5px; /*设置圆角*/ text-align:center; } ","date":"2020-03-21","objectID":"/en/miniprogram01/:3:2","tags":["MiniProgram"],"title":"结合官方文档，入门微信小程序","uri":"/en/miniprogram01/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸对齐/关键点训练业务理论及实现","date":"2020-03-18","objectID":"/en/face10/","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸对齐/关键点训练业务理论及实现 ","date":"2020-03-18","objectID":"/en/face10/:0:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"1 人脸对齐/关键点业务介绍 根据输入的人脸图像，自动定位出面部特征关键点，如眼睛、鼻尖、嘴角点、眉毛以及人脸各部件轮廓点等 2D人脸 3D人脸 关键点数量：5,21,29,68,96,192…… 旷视科技1000点与8000点对比如下图 表情识别、人脸编辑、人脸美妆、三维重建 ","date":"2020-03-18","objectID":"/en/face10/:1:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"2 人脸关键点算法评价指标 ","date":"2020-03-18","objectID":"/en/face10/:2:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"2.1 通常将输出结果表示成点的集合，再进一步表示成向量 ","date":"2020-03-18","objectID":"/en/face10/:2:1","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"2.2 NME：Normalized mean error 两外眼角间距离 人脸外接矩阵对角线长度 $$ e = \\frac{\\textstyle\\sum_{i=1}^n \\Vert X_{(i)}^e-X_{(i)}^e \\Vert_2}{N * d_{io}}$$ ","date":"2020-03-18","objectID":"/en/face10/:2:2","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"2.3 CED：Cumulative Errors Distribution（CED）curve 横坐标表达当前的偏差值 纵坐标表达满足当前偏差值得图片的数量 ","date":"2020-03-18","objectID":"/en/face10/:2:3","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"3 人脸关键点方法介绍 ","date":"2020-03-18","objectID":"/en/face10/:3:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"3.1 传统方法 3.1.1 形状学习 基于形状学习的模型：ASM、AAM 基于形状学习的人脸关键点流程 笔记 主要作用：勾勒出人脸基准点的轮廓，轮廓属于特定的形状。 人脸模型：对人脸特征点进行建模，首先选择基准图片，利用基准图片作为参照， 将训练集的图片按照基准进行变换，得到训练集的图像处理后的集合， 对训练集中人脸关键点标定的位置，对每一个点进行特征提取，以当前关键点为中心， 提取它的局部的图像区域进行特征提取，假设特征提取后有5个点，就会得到5个向量。 点搜索：给定一个测试集的图片，进行关键点的搜索， 初步搜索时选择5个点中的某几个点作为最开始搜索的对象，通常选择眼睛或鼻子。 对齐：根据基准点对人脸进行对齐。 其他点的搜索定位：以基准点为参照，预测想要定位的其他的点的大致位置！ 3.1.2 级联回归学习 基于级联回归学习的模型：CPR 笔记 对于人脸特征点定位，人脸关键点检测的目的是估计向量(Facial Shape) $S=(x_1,y_1,x_2,y_2,…,x_K,y_K)$ ， 其中 $K$ 表示关键点的个数，由于每个关键点有横纵两个坐标，所以 $S$ 的长度为 $2K$ 。 对于一个输入 $I$ , 给定一个初始形状 $S^0$ (通常是在训练集计算得到的平均形状)。 每一级输出的是根据输入图像得到的偏移估计$\\Delta S$，那么每一级都会更准确的预测 脸上Landmark的位置 $$S^{t+1 }= S^t+r_t(\\phi(I,S^t))$$ 其中，$S^t$ 和 $S^{t+1}$ 分别表示第 $t$ 和 $t+1$ 级预测的人脸形状(即所有关键点集合)，表示回归函数 CPR通过一系列回归器将一个指定的初始预测值逐步细化， 每一个回归器都依靠前一个回归器的输出来执行简单的图像操作， 整个系统可自动的从训练样本中学习。 CPR检测流程一共有T个阶段，在每个阶段中首先进行特征提取f， 这里使用的是shape-indexed features， 也可以使用诸如HOG、SIFT等人工设计的特征， 或者其他可学习特征（learning based features）， 然后通过训练得到的回归器R来估计增量ΔS( update vector)， 把ΔS加到前一个阶段的S上得到新的S，这样通过不断的迭代即可以得到最终的S(shape)。 推荐阅读文献 Face Alignment at 3000 FPS via Regressing Local Binary Features(LBF) Joint Cascade Face Detection and Alignment One Millisecond Face Alignment with an Ensemble of Regresion Trees(ETR) Face Alignment In-the-Wild: A Survey Facial feature point detection: A comprehensive survey ","date":"2020-03-18","objectID":"/en/face10/:3:1","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"3.2 深度学习方法 3.2.1 多级回归 DCNN 总体思想是由粗到细，实现5个人脸关键点的精确定位。网络结构分为3层：level 1、level 2、level 3。每层都包含多个独立的CNN模型，负责预测部分或全部关键点位置，在此基础上平均来得到该层最终的预测结果。 DCNN-Face++ 3.2.2 多任务 TCDCN 使用与人脸相关的属性共同来学习人脸的特征点位置，通过这种多任务的学习，来提高人脸特征点检测的鲁棒性。具体而言，就是在人脸特征点检测时候，同时进行多个任务（包括性别、是否戴眼镜、是否微笑以及脸部姿势）的学习。使用这些辅助属性可以帮助更好的定位特征点。 MTCNN CNN回归和检测多任务，多尺度级联，三个网络级联，由粗到精，同时完成检测和特征点定位回归。 3.2.3 直接回归 Vanilla CNN 作者对网络不同层的特征进行使用GMM进行聚类分析，发现网络进行的是层次的，由粗到精(hierarchical, coarse to fine)的特征定位，越深的网络特征越能反应出特征点的位置。 3.2.4 热图 DAN 与以往级联神经网络输入的是图像的某一部分不同，DAN各阶段网络的输入均为整张图片。当网络均采用整张图片作为输入时，DAN可以有效的克服头部姿态以及初始化带来的问题，从而得到更好的检测效果。之所以DAN能将整张图片作为输入，是因为其加入了关键点热图（Landmark Heatmaps），关键点热图的使用是本文的重要创新点。 3.2.5 3D人脸关键点定位 2D人脸主要为可见点信息，对于侧脸很难训练 正脸到侧脸姿态变化较大，且标注十分困难 人脸本身就具有深度信息 Dense Face Alignment DenseReg FAN 3DDFA PRNet ","date":"2020-03-18","objectID":"/en/face10/:3:2","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"4 人脸关键点常用数据集 数据集 个数 BiolD 20 LFPW 29 AFLW 21 COFW 29 ICCV13/MVFW 68 OCFW 68 300-W 68 HELEN 29 CelebA 5 300W-LP 68点 AFW,LFPW,HELEN,IBUG and XM2VTS Dlib库 能够检测出当前图片中的人脸的位置，并且完成人脸定位（68点），生成深度学习输入的训练样本。 ","date":"2020-03-18","objectID":"/en/face10/:4:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"5 人脸关键点定位问题挑战及解决思路 问题 解决思路 环境的变化 数据增强 姿态的变化 姿态分类、人脸对齐（矫正） 表情的变化 数据增强，GAN 遮挡问题 3D人脸关键点定位、优化主干网络 稠密点 3D人脸关键点定位、优化主干网络 ","date":"2020-03-18","objectID":"/en/face10/:5:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"6 编程实战及模型优化 TensorFlow+SENet-人脸关键点定位编程实战及模型优化 ","date":"2020-03-18","objectID":"/en/face10/:6:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"6.1 TensorFlow+SENet模型详细介绍 人脸关键点网络结构 笔记 数据：训练样本 网络结构：SENet 输出：预测人脸中的68个关键点，表示为68*2=136维的向量 回归网络 网络结构 SENet模型详细介绍 笔记 SE-Inception Module 是将SE模块嵌入到Inception结构的一个示例。方框旁边的维度信息代表该层的输出。 这里我们使用global average pooling作为Squeeze操作。紧接着两个Fully Connected 层组成一个Bottleneck结构去建模通道间的相关性，并输出和输入特征同样数目的权重。 我们首先将特征维度降低到输入的1/16，然后经过ReLu激活后再通过一个Fully Connected 层升回到原来的维度。这样做比直接用一个Fully Connected层的好处在于： 具有更多的非线性，可以更好地拟合通道间复杂的相关性； 极大地减少了参数量和计算量。然后通过一个Sigmoid的门获得0~1之间归一化的权重，最后通过一个Scale的操作来将归一化后的权重加权到每个通道的特征上。 SE-ResNet Module 操作过程基本和SE-Inception一样，只不过是在Addition前对分支上 Residual的特征进行了特征重标定。如果对Addition后主支上的特征进行重标定， 由于在主干上存在0~1的scale操作，在网络较深BP优化时就会在靠近输入层容易 出现梯度消散的情况，导致模型难以优化。 X1 = conv(X0) X2 = weight(X0) X3 = X0 + X1 ** X2 ","date":"2020-03-18","objectID":"/en/face10/:6:1","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"6.2 环境参数 环境参数 Tensorflow1.12 Ubuntu16.04 Python3.5 ","date":"2020-03-18","objectID":"/en/face10/:6:2","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"6.3 数据准备 数据准备 300W-LP ","date":"2020-03-18","objectID":"/en/face10/:6:3","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"7 实例代码 ","date":"2020-03-18","objectID":"/en/face10/:7:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"7.1 数据集处理 对landmark中的标注信息进行适当的调整，代码如下： x_max = int(np.max(landmark[0:68, 0])) x_min = int(np.min(landmark[0:68, 0])) y_max = int(np.max(landmark[0:68, 1])) y_min = int(np.min(landmark[0:68, 1])) y_min = int(y_min - (y_max - y_min) * 0.3) y_max = int(y_max + (y_max - y_min) * 0.05) x_min = int(x_min - (x_max - x_min) * 0.05) x_max = int(x_max + (x_max - x_min) * 0.05) 对数据进行裁剪，将人脸区域抠出来，获取人脸框的大小并对landmark数据进行标准化，将其归一化到0~1之间，对x,y的处理如下： im_point.append((landmark[p][0] - x_min) * 1.0 / sp[1]) im_point.append((landmark[p][1] - y_min) * 1.0 / sp[0]) 将图片的大小改变为128*128的大小，将整个数据集中80%的数据划分为训练集，剩余的20%划分为测试集。 ","date":"2020-03-18","objectID":"/en/face10/:7:1","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"7.2 模型训练 数据读取：定义get_one_batch函数，每次从中获取一个batchsize的数据，定义type=0时为训练集，读取train.tfrecords文件，type=1时为测试集，读取test.tfrecords。定义和读取文件队列，对训练集使用shuffle_batch获取队列中的数据，对测试集直接使用batch获取队列中的数据。定义features对读取出的数据进行解析，获取features中的image和label，接着将图像数据解码为uint8格式，对图像数据进行reshape并将其转换为float型。 定义网络结构：定义输入为placeholder，数据类型为float32，shape中batch_size定义为None，图像尺寸为128 * 128 * 3；模型共需要预测68个人脸关键点共136个点，将label的shape定义为136，具体代码如下： input_x = tf.placeholder(tf.float32, shape=[None, 128, 128, 3]) label = tf.placeholder(tf.float32, shape=[None, 136]) logits = SENet(input_x, is_training=True, keep_prob=0.8) SENet:定义senet_blob(net, in_dim, on_dim, stride)函数，其中in_dim为输入特征图通道数，on_dim为输出特征图通道数，stride表示当前网络是否进行下采样。对输入的张量进行备份，并进行卷积操作，对通道的数量进行适当的降维，第一次，降4倍，进行1 * 1的卷积，接着进行3 * 3的卷积，接着再进行1 * 1的卷积，得到与输出维度相同的卷积，对stride大于1的数据通道poll2d进行下采样。通过reduce_mean对1、2维度进行average_pooling，调用slim.fully_connected加入全连接层，加入激活层，再次加入全连接层，使用sigomid将权重映射到0,1之间，得到通道加权之后的网络结构，将得到的值与备份的张量相加，实现跳连部分。 定义好基本模块之后，开始搭建SENet网络结构，定义权重可选的正则化程序为slim.l2_regularizer(0.00001)、定义权重初始化程序为slim.variance_scaling_initializer()、定义激活函数为tf.nn.relu、定义正则化函数为slim.batch_norm、定义正则化函数的参数为bn_param。网络结构定义代码如下： with slim.arg_scope([slim.batch_norm], **bn_param): net = slim.conv2d(input_x, 32, [3, 3]) net = slim.avg_pool2d(net, [3, 3], stride=2, padding=\"SAME\") net = senet_blob(net, 32, 64, 2) net = senet_blob(net, 64, 128, 2) net = senet_blob(net, 128, 128, 2) net = senet_blob(net, 128, 256, 2) net = senet_blob(net, 256, 512, 2) net = tf.reduce_mean(net, axis=[1, 2])) net = slim.fully_connected(net, 1024) net = tf.nn.dropout(net, keep_prob=keep_prob) net = tf.nn.relu(net) net = slim.fully_connected(net, 136) return net 网络维度的变化如下图所示： 学习率：学习率采用衰减学习率，初始学习率为0.001，衰减步长为1000步，每次衰减0.98，定义update_ops对batchnorm层进行更新，具体代码如下： global_step = tf.Variable(0, trainable=False) lr = tf.train.exponential_decay(0.001, global_step, decay_steps=1000, decay_rate=0.98, staircase=False) update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS) with tf.control_dependencies(update_ops): train_op = tf.train.AdamOptimizer(lr).minimize(loss, global_step) 模型共训练150000次，并对模型和日志信息进行保存，loss曲线如下图所示： ","date":"2020-03-18","objectID":"/en/face10/:7:2","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"7.3 模型固化 模型固化部分的网络结构与模型训练中的基本一致，需要将is_training修改为False、keep_prob修改为1.0,将shape中的None置为1表示每次处理一张图片，修改前后的代码如下： #修改前：input_x = tf.placeholder(tf.float32, shape=[None, 128, 128, 3]) input_x = tf.placeholder(tf.float32, shape=[1, 128, 128, 3]) #修改前：logits = SENet(input_x, is_training=True, keep_prob=0.8) logits = SENet(input_x, is_training=False, keep_prob=1.0) 根据读取到的ckpt文件恢复当前的graph，定义输出的网络节点的对应部分，并保存pb文件，相关代码如下： coord = tf.train.Coordinator() tf.train.start_queue_runners(sess=session, coord=coord) init_op = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer()) session.run(init_op) ckpt = tf.train.get_checkpoint_state(\"models-3\") saver.restore(session, ckpt.model_checkpoint_path) print(ckpt.model_checkpoint_path) output_graph_def = tf.graph_util.convert_variables_to_constants(session,session.graph.as_graph_def(),['fully_connected_9/Relu']) with tf.gfile.FastGFile(\"face_landmark_model.pb\", \"wb\") as f: f.write(output_graph_def.SerializeToString()) f.close() ","date":"2020-03-18","objectID":"/en/face10/:7:3","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"7.4 模型测试 读取打包好的pb文件，从pb文件中恢复当前的graph， 接着进行前项推理，通过opencv读取用于测试的人脸图片，将图片resize到128 * 128，将读取到的图片扩充为四维后传给网络，使用opencv对68个人脸关键点进行绘制，并显示输出结果，相关代码如下： for im_url in im_list: im_data = cv2.imread(im_url) sp = im_data.shape im_data = im_data[sp[0] * 1//4:,:,:] im_data = cv2.resize(im_data, (128, 128)) pred = sess.run(landmark, {\"Placeholder:0\": np.expand_dims(im_data, 0)}) pred = pred[0] for i in range(0, 136, 2): cv2.circle(im_data, (int(pred[i] * 128), int(pred[i+1] * 128)), 2, (0, 255, 0), 2) cv2.imshow(\"test\", im_data) cv2.waitKey(0) 人脸关键点定位的模型测试结果如下图所示： ","date":"2020-03-18","objectID":"/en/face10/:7:4","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["FaceRecognition"],"content":"8 参考资料 参考资料 人脸关键点对齐 人脸对齐（十）–人脸对齐综述 人脸特征点检测（四）——Tasks-Constrained DCN（TCDCN） 人脸关键点检测9——DAN SE-Inception v3架构的模型搭建（keras代码实现） 对SE_ResNet的理解 ","date":"2020-03-18","objectID":"/en/face10/:8:0","tags":["FaceRecognition","TensorFlow","SENet","FaceAlignment"],"title":"人脸对齐/关键点训练业务理论及实现","uri":"/en/face10/"},{"categories":["BugFixes"],"content":"解决AttributeError: module 'scipy.misc' has no attribute 'imread'的报错","date":"2020-03-15","objectID":"/en/bug02/","tags":["BugFixes","人脸匹配","scipy"],"title":"解决AttributeError: module 'scipy.misc' ···  'imread'的报错","uri":"/en/bug02/"},{"categories":["BugFixes"],"content":"解决AttributeError: module ‘scipy.misc’ has no attribute ‘imread’的报错 ","date":"2020-03-15","objectID":"/en/bug02/:0:0","tags":["BugFixes","人脸匹配","scipy"],"title":"解决AttributeError: module 'scipy.misc' ···  'imread'的报错","uri":"/en/bug02/"},{"categories":["BugFixes"],"content":"系统配置 系统配置 ubuntu 16.04 python 3.5 tensorflow 1.12.0 ","date":"2020-03-15","objectID":"/en/bug02/:0:1","tags":["BugFixes","人脸匹配","scipy"],"title":"解决AttributeError: module 'scipy.misc' ···  'imread'的报错","uri":"/en/bug02/"},{"categories":["BugFixes"],"content":"报错信息 报错信息 module ‘scipy_misc’ has no attribute ‘imread’ ","date":"2020-03-15","objectID":"/en/bug02/:0:2","tags":["BugFixes","人脸匹配","scipy"],"title":"解决AttributeError: module 'scipy.misc' ···  'imread'的报错","uri":"/en/bug02/"},{"categories":["BugFixes"],"content":"问题分析 问题分析 python3 src\\align\\align_dataset_mtcnn.py /root/py3_tensorflow/dataset/LFW /root/py3_tensorflow/dataset/LFW-160 --margin 32 --random_order --gpu_memory_fraction 0.25 在解析LFW数据集时报错，应该是在安装FaceNet的依赖的时候没有在requirements.txt中限定版本，默认安装了高版本的scipy imread is deprecated! imread is deprecated in SciPy 1.0.0, and will be removed in 1.2.0. Use imageio.imread instead. ","date":"2020-03-15","objectID":"/en/bug02/:0:3","tags":["BugFixes","人脸匹配","scipy"],"title":"解决AttributeError: module 'scipy.misc' ···  'imread'的报错","uri":"/en/bug02/"},{"categories":["BugFixes"],"content":"修复方法 修复方法 降低scipy的版本为1.2.1 sudo pip3 uninstall scipy sudo pip3 install scipy==1.2.1 ","date":"2020-03-15","objectID":"/en/bug02/:0:4","tags":["BugFixes","人脸匹配","scipy"],"title":"解决AttributeError: module 'scipy.misc' ···  'imread'的报错","uri":"/en/bug02/"},{"categories":["BugFixes"],"content":"解决ValueError: Object arrays cannot be loaded when allow_pickle=False的报错","date":"2020-03-15","objectID":"/en/bug01/","tags":["BugFixes","人脸匹配","numpy"],"title":"解决ValueError: Object arrays ··· allow_pickle=False的报错","uri":"/en/bug01/"},{"categories":["BugFixes"],"content":"解决ValueError: Object arrays cannot be loaded when allow_pickle=False的报错 ","date":"2020-03-15","objectID":"/en/bug01/:0:0","tags":["BugFixes","人脸匹配","numpy"],"title":"解决ValueError: Object arrays ··· allow_pickle=False的报错","uri":"/en/bug01/"},{"categories":["BugFixes"],"content":"系统配置 系统配置 ubuntu 16.04 python 3.5 tensorflow 1.12.0 ","date":"2020-03-15","objectID":"/en/bug01/:0:1","tags":["BugFixes","人脸匹配","numpy"],"title":"解决ValueError: Object arrays ··· allow_pickle=False的报错","uri":"/en/bug01/"},{"categories":["BugFixes"],"content":"报错信息 报错信息 ValueError: Object arrays cannot be loaded when allow_pickle=False ","date":"2020-03-15","objectID":"/en/bug01/:0:2","tags":["BugFixes","人脸匹配","numpy"],"title":"解决ValueError: Object arrays ··· allow_pickle=False的报错","uri":"/en/bug01/"},{"categories":["BugFixes"],"content":"问题分析 问题分析 python3 src\\align\\align_dataset_mtcnn.py /root/py3_tensorflow/dataset/LFW /root/py3_tensorflow/dataset/LFW-160 --margin 32 --random_order --gpu_memory_fraction 0.25 numpy版本过高 ","date":"2020-03-15","objectID":"/en/bug01/:0:3","tags":["BugFixes","人脸匹配","numpy"],"title":"解决ValueError: Object arrays ··· allow_pickle=False的报错","uri":"/en/bug01/"},{"categories":["BugFixes"],"content":"修复方法 修复方法 降低numpy版本为1.16.2 sudo pip3 uninstall numpy sudo pip3 install numpy==1.16.2 ","date":"2020-03-15","objectID":"/en/bug01/:0:4","tags":["BugFixes","人脸匹配","numpy"],"title":"解决ValueError: Object arrays ··· allow_pickle=False的报错","uri":"/en/bug01/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸匹配业务理论及实现","date":"2020-03-14","objectID":"/en/face09/","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸匹配业务理论及实现 ","date":"2020-03-14","objectID":"/en/face09/:0:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"1 人脸匹配业务介绍 1:1 验证， verification 1:N 识别， identification ","date":"2020-03-14","objectID":"/en/face09/:1:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"2 人脸匹配算法性能评价指标 人脸验证：ROC曲线、PR曲线 人脸识别：CMC曲线 ","date":"2020-03-14","objectID":"/en/face09/:2:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"2.1 CMC曲线 累积匹配曲线 Top1 error 预测出来最大概率的那个分类是正确的概率。 Top5 error 预测出来最大概率的5个分类里有正确的概率。 ","date":"2020-03-14","objectID":"/en/face09/:2:1","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"3 人脸匹配方法介绍 ","date":"2020-03-14","objectID":"/en/face09/:3:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"3.1 人脸特征表示问题 颜色：一般输出一个向量，通常为一个直方图 纹理：对颜色矩阵差分可以得到纹理特征 形状：对图像中的结构信息进行分解 学习：对以上三种人为设计的基本信息进行学习，加入监督信息、类别信息等，更加鲁棒 笔记 如何进行特征表示的优化学习？ PCA（无监督） 对高维的稠密的可以通过PCA进行特征降维，提取主成分 LDA（有监督） 优化特征空间 迁移学习 对于空间上存在不同分布的两种样本，指向同一个投影（Common Subspace） 稀疏表示（Deep Learning之前的一代技术） 多用于信号分解、图像降噪等领域，用较少的基本信号的线性组合来表达大部分或者全部的原始信号 低秩学习（low-rank） 图像数据具有局部相似性，可能存在“一一表示”，从而矩阵就可能不是满秩 哈希学习 哈希函数可以是基于线性的、核函数、球面函数、深度神经网络、无参函数 通过机器学习机制将数据映射成简洁的二进制串的形式, 同时使得哈希码尽可能地保持原空间中的近邻关系, 即保相似性 ","date":"2020-03-14","objectID":"/en/face09/:3:1","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"3.2 人脸特征度量问题 3.2.1 什么是度量问题？ A和B同类，A和C不同类 A和B的相似性大于A和C的相似性 3.2.2 欧氏距离（Euclidean Distance） 欧氏距离是最常见的距离度量，衡量的是多维空间中各个点之间的绝对距离。 如点$x=(x_1,…,x_n)$和$y=(y_1,…,y_n)$之间的距离为： $$ d(x,y)=\\sqrt{\\displaystyle\\sum_{i=1}^n(x_i - y_i)^2} $$ 3.2.3 马氏距离（Mahalanobis Distance） 是由马哈拉诺比斯（P. C. Mahalanobis）提出的，表示数据的协方差距离。 它是一种有效的计算两个未知样本集的相似度的方法。 与欧氏距离不同的是它考虑到各种特性之间的联系, 并且是尺度无关的（scale-invariant），即独立于测量尺度。 对于一个均值为$μ=(μ_1,μ_2,μ_3,…,μ_p)^T$协方差矩阵为$S$的多变量$x=(x_1,x_2,x_3,…,x_p)^T$其马氏距离为： $$D_M(x)=\\sqrt{(x−μ)^TS^{-1}(x−μ)}$$ 3.2.4 度量优化问题 对解空间加不同的约束，在很大的假设空间中找出合适的解，缩小解空间。 ","date":"2020-03-14","objectID":"/en/face09/:3:2","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"3.3 人脸匹配的深度学习方法 笔记 分类问题的网络是单支的 进行人脸特征匹配时，用欧氏距离和余弦距离来测量当前提取出来的特征向量，特征向量利用网络进行学习 样本量非常丰富，单类样本样本数量非常多时，通常采用分类网络 相似性的网络是多分支的 通过多分支网络对输入的样本进行改造，根据样本id设计不同的Loss 2分支采用 Contrastive Loss 3分支采用 Triplet Loss 利用两种不同的Loss提取出特征，提取的特征具有鉴别信息（同类之间相似性很小，不同类之间相似性很大） 通常采用欧氏距离进行Loss的计算 多分支网络在进行特征表示时，会进行不同分支间参数共享，网络收敛后，去除其中一只来提取特征，以此提取出特征向量 样本量比较少，单类样本数量也比较少时，通常采用多分支网络结构 重排序（ReRank） 利用深度学习网络提取完特征，并对特征进行了相似性度量和排序后，根据排序结果再次重新排序 ","date":"2020-03-14","objectID":"/en/face09/:4:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"4 FaceNet编程实战及模型优化 ","date":"2020-03-14","objectID":"/en/face09/:5:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"4.1 FaceNet模型详细介绍 4.1.1 Learn to rank 笔记 Anchor和Positive为同类样本 经过学习之后，同类样本之间的相似度更高（距离更小） 4.1.2 网络结构 笔记 FaceNet也可称为Triplet Net的一个网络结构 Batch由多个三元组构成，包含样本对(Anchor,Positive,Negative) DEEP ARCHITECTURE 深度网络主干网络（标准卷积神经网），对输入的图像进行特征提取，将图片转化成向量 对提取出来的向量通过L2进行归一化 得到归一化后的EMBEDDING（最终的特征向量） EMBEDDING作为 Triplet Loss 的输入，输入同样为三元组(Anchor的特征向量,Positive的特征向量,Negative的特征向量) 4.1.3 Loss设计 $$\\displaystyle\\sum_{i=1}^N[\\text{\\textbardbl}f(x{_i^a})-f(x{_i^p})\\text{\\textbardbl}{_2^2} -\\text{\\textbardbl}f(x{_i^a})-f(x{_i^n})\\text{\\textbardbl}{_2^2}+\\alpha]_+$$ 笔记 N个三元组 (Anchor-Positive)-(Anchor-Negative) 得到同类和不同类之间的样本距离差 α为间隔，通过α可以调节同类样本和不同类样本之间的距离满足多大的距离差才能算作一个样本 通过Loss的设计学出来的特征可以用来度量样本的相似度 计算向量相似度时采用的是二范式，即欧氏距离 利用FaceNet进行特征向量提取，计算样本相似度时只采用欧氏距离即可 4.1.4 难例挖掘 OHEM 笔记 难例挖掘是指,针对模型训练过程中导致损失值很大的一些样本(即使模型很大概率分类错误的样本),重新训练它们. 维护一个错误分类样本池, 把每个batch训练数据中的出错率很大的样本放入该样本池中,当积累到一个batch以后,将这些样本放回网络重新训练. 在进行Loss计算时，主要考虑难例，对简单样本不计算Loss 4.1.5 数据增强 颜色信息、几何变换、GAN、多样本数据增强 笔记 数据增强也叫数据扩增，意思是在不实质性的增加数据的情况下，让有限的数据产生等价于更多数据的价值。 颜色信息常包括：噪声、模糊、颜色变换、擦除、填充等。 几何变换常包括：翻转，旋转，裁剪，变形，缩放等。 GAN包含两个网络，一个是生成网络，一个是对抗网络，基本原理如下： G是一个生成图片的网络，它接收随机的噪声z，通过噪声生成图片，记做G(z) 。 D是一个判别网络，判别一张图片是不是“真实的”，即是真实的图片，还是由G生成的图片。 多样本数据增强不同于单样本数据增强，多样本数据增强方法利用多个样本来产生新的样本。 ","date":"2020-03-14","objectID":"/en/face09/:5:1","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"4.2 FaceNet环境搭建 笔记 源码地址： https://github.com/davidsandberg/facenet TensorFlow1.12、Ubuntu16.04、Python3.5 https://github.com/VisualComputingInstitute/triplet-reid #下载FaceNet git clone https://github.com/davidsandberg/facenet # 进入facenet目录下 cd facenet #修改 requirements.txt 将tensorflow==1.7注释掉，保存 gedit requirements.txt # 下载需要的依赖库 sudo pip3 install -r requirements.txt #安装完成 ","date":"2020-03-14","objectID":"/en/face09/:5:2","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"4.3 人脸匹配数据准备 4.3.1 常见数据集 LFW LFW人脸数据库主要用来研究非受限情况下的人脸识别问题,主要测试人脸识别的准确率。 Celeba CelebA由香港中文大学开放提供，广泛用于人脸相关的计算机视觉训练任务，可用于人脸属性标识训练、人脸检测训练以及landmark标记等。 VGGface2 VGGFace2 是一个大规模人脸识别数据，包含331万图片，9131个ID，平均图片个数为362.6。 CASIA-WebFace CASIA-WebFace数据集包含了10575 个人的494414 张图像。CASIA-webface数据库，压缩包有4个多g，里面包含了10000个人，一共50万张人脸图片，无论是做SVM，DNN还是别的训练，都是非常好的数据库。 CASIA-faceV5 亚洲人脸数据库 4.3.2 数据格式 文件夹名/文件夹名_文件名 同一个人的图片放在相同文件夹 4.3.3 人脸匹配数据准备 1.方法一 #下载FaceNet源码 git clone https://github.com/davidsandberg/facenet # 进入facenet目录下 cd facenet #安装所需依赖库 sudo pip3 install -r requirements.txt #添加环境变量 export PYTHONPATH=$(pwd)/src #人脸对齐脚本 -\u003e 将图片裁剪成160*160的人脸图片 python3 src/align/align_dataset_mtcnn.py lfw lfw_160--image_size 160 --margin 32 --random_order -- gpu_memory_fraction 0.25 2.方法二 dlib库用来进行人脸检测+关键点定位 根据关键点或者人脸检测结果，提取人脸图像 3.通过mtcnn完成人脸匹配数据准备 ","date":"2020-03-14","objectID":"/en/face09/:5:3","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"5 实例代码 ","date":"2020-03-14","objectID":"/en/face09/:6:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"5.1 数据集处理 在使用FaceNet框架进行人脸匹配模型训练时，需要将数据转换为FaceNet要求的数据格式，同一个人的不同图片存放在同一个文件夹下，数据格式为：“文件夹名/文件夹名_文件名”。在FaceNet中不需要额外的将数据打包为tfrecord格式，如果与要求的格式一致，FaceNet框架会自动解析数据。 LFW数据集的处理：在使用FaceNet框架时需要将图片裁剪到160*160，系统使用FaceNet自带的align_dataset_mtcnn.py脚本对LFW数据集中的人脸图片进行处理。命令和参数的配置如下： python3 src/align/align_dataset_mtcnn.py /mnt/dataset/LFW /mnt/dataset/LFW-160 --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25 CASIA-FaceV5亚洲人脸数据集的处理：使用dlib库创建人脸检测器，利用人脸检测器对数据集中的图片依次进行检测，将未检测出人脸的图片过滤掉，成功检测出人脸的图片先获取到检测出的人脸位置，对检测出的人脸框进行扩充，这样做可以保证获取到的人脸是一张完整的人脸，根据扩充后的坐标将图片裁剪为160 * 160大小，裁剪后的图片根据不同的人存储到相对应的文件夹下，主要代码如下： for idx_folder in im_folder_list: im_items_list = glob.glob(idx_folder + \"/*\") if not os.path.exists(\"{}/{}\".format(crop_im_path, idx)): os.mkdir(\"{}/{}\".format(crop_im_path, idx)) idx_im = 0 for im_path in im_items_list: im_data = cv2.imread(im_path) dets = detector(im_data, 1) if dets.__len__() == 0: continue d = dets[0] # 获取人脸坐标 x1 = d.left() y1 = d.top() x2 = d.right() y2 = d.bottom() # 对识别出的人脸进行扩充 y1 = int(y1 - (y2 - y1) * 0.3) x1 = int(x1 - (x2 - x1) * 0.05) x2 = int(x2 + (x2 - x1) * 0.05) y2 = y2 im_crop_data = im_data[y1:y2,x1:x2] im_data = cv2.resize(im_crop_data, (160, 160)) im_save_path = \"{}/{}/{}_{}.jpg\".format(crop_im_path, idx, idx, \"%04d\" % idx_im) cv2.imwrite(im_save_path, im_data) idx_im += 1 idx += 1 ","date":"2020-03-14","objectID":"/en/face09/:6:1","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"5.2 模型训练 人脸匹配模型训练采用FaceNet提供的train_tripletloss.py脚本，在使用tripletloss训练时，需要修改数据的存放路径，其余参数采用默认参数，相关代码如下： parser.add_argument('--data_dir', type=str, help='Path to the data directory containing aligned face patches.', default='/mnt/dataset/64_CASIA-FaceV5/crop_image_160' '') 模型训练中loss曲线如下图所示: ","date":"2020-03-14","objectID":"/en/face09/:6:2","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"5.3 模型固化 FaceNet提供了freeze_graph.py脚本，来进行模型固化。脚本运行需要两个参数，model_dir是训练好的模型的路径，output_file是固化好的pb文件的输出路径。 ","date":"2020-03-14","objectID":"/en/face09/:6:3","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"5.4 模型测试 使用FaceNet中提供得validate_on_lfw.py脚本，利用经过处理的LFW数据集对训练好的模型进行测试。该脚本使用auc实现对算法性能的评价。在使用该脚本时，需要传入两个参数，一个是处理好的LFW数据集的路径，一个是训练好的模型的路径。 测试得到的数据如下图所示： ","date":"2020-03-14","objectID":"/en/face09/:6:4","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["FaceRecognition"],"content":"6 参考资料 参考资料 《机器学习》第10章 降维与度量分析 【技术综述】深度学习中的数据增强方法都有哪些？ face recognition[翻译][深度人脸识别:综述] NanoNets :数据有限时如何应用深度学习？ 数据增强：数据有限时如何使用深度学习 ？ LFW人脸数据库的简介 CelebA数据集详细介绍及其属性提取源代码 性别年龄论文阅读（3）——VGGFace2 Dataset之CASIA-WebFace ","date":"2020-03-14","objectID":"/en/face09/:7:0","tags":["FaceRecognition","TensorFlow"],"title":"人脸匹配业务理论及实现","uri":"/en/face09/"},{"categories":["Flask"],"content":"结合官方文档 入门Flask","date":"2020-03-13","objectID":"/en/flask01/","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"结合Flask官方中文文档，学习Flask基础入门知识 ","date":"2020-03-13","objectID":"/en/flask01/:0:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"1 Flask介绍 ","date":"2020-03-13","objectID":"/en/flask01/:1:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"1.1 简介 Flask是一个基于Python实现的Web开发‘微’框架 官方文档：http://flask.pocoo.org/docs/0.12/ 中文文档：http://docs.jinkan.org/docs/flask/ Flask和Django一样，也是一个基于MVC设计模式的Web框架 Flask依赖三个库 Jinja2 模板引擎 Werkzeug WSGI工具集 Itsdangerous基于Django的签名模块 ","date":"2020-03-13","objectID":"/en/flask01/:1:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"1.2 流行原因 有非常齐全的官方文档，上手非常简单 有非常好的扩展机制和第三方扩展环境，工作中常见的软件都会有对应的扩展。自己动手实现扩展也很容易 社区活跃度非常高 微信框架的形式给开发者带来更大的选择空间 ","date":"2020-03-13","objectID":"/en/flask01/:1:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"1.3 MVC(Model, View, Controller)设计模式 一种软件设计典范，用一种业务逻辑，使数据，界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面与用户交互的同时，不需要重新编写业务逻辑。 MVC被独特的发展起来用于映射传统的输入，处理和输出功能在一个逻辑的图形化界面结构中。 核心思想：解耦 优点：降低各模块之间的耦合性，方便变更，更容易重构代码，最大程度实现了代码的重用。 Model:用于封装与应用程序的业务逻辑相关的数据及对数据的处理方法，是Web应用程序中用于处理应用程序的数据逻辑部分，Model通常只提供功能性的接口，通过这些接口可以获取Model的所有功能。 View:负责数据的显示和呈现，View是对用户 的直接输出。 Controller:负贵从用户端收集用户的输入，可以看成提供View的反向功能，主要处理用户交互。 ","date":"2020-03-13","objectID":"/en/flask01/:1:3","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"2 安装（Linux） ","date":"2020-03-13","objectID":"/en/flask01/:2:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"2.1 创建一个虚拟环境 创建一个项目文件夹，然后创建一个虚拟环境。创建完成项目文件夹中会有一个venv文件夹： mkdir myproject cd myproject python3 -m venv venv ","date":"2020-03-13","objectID":"/en/flask01/:2:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"2.2 激活虚拟环境 在开始工作前，先要激活响应的虚拟环境： .venv/bin/activate ","date":"2020-03-13","objectID":"/en/flask01/:2:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"2.3 安装Flask 在已激活的虚拟环境中可以使用如下命令安装Flask： pip3 install Flask ","date":"2020-03-13","objectID":"/en/flask01/:2:3","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"2.4 安装virtualenv 在Linux下，virtualenv 通过操作系统的包管理安装： # Debian,Ubuntu sudo apt-get install python-virtualenv ","date":"2020-03-13","objectID":"/en/flask01/:2:4","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"3 Hello World from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return 'Hello,World!' if __name__ == '__main__': app.run() 笔记 首先导入了Flask类。 该类的实例将会成为WSGI应用。 接着创建一个该类的实例。第一个参数是应用模块或者包的名称。如果使用一个单一模块(就像本例), 那么应当使用 name ，因为名称会根据这个模块是按应用方式使用还是作为一个模块导入而发生变化(可能 是 ‘main’ ，也可能是实际导入的名称)。这个参数是必需的，这样 Flask 才能知道在哪里可以找到模板和 静态文件等东西。 然后使用 route() 装饰器来告诉 Flask 触发函数的 URL 。 函数名称被用于生成相关联的URL。函数最后返回需要在用户浏览器中显示的信息。 把它保存为 hello. py 或其他类似名称。不要使用flask.py作为应用名称，这会与 Flask 本身发生冲突。 ","date":"2020-03-13","objectID":"/en/flask01/:3:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"4 参数配置 ","date":"2020-03-13","objectID":"/en/flask01/:4:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"4.1 利用app.run（）配置 在启动的时候还可以添加参数，在 run() 中 debug 是否开启调试模式，开启后修改过python代码会自动重启 threaded 是否开启多线程 port 启动指定服务器的端口号 host 主机，默认是127.0.0.1，指定为0.0.0.0代表本机所有ip if __name__ == '__main__': app.run(debug=True,port=8000,host='0.0.0.0') ","date":"2020-03-13","objectID":"/en/flask01/:4:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"4.2 使用config.py配置文件 新建config.py # 以DEBUG为例 DEBUG = True 载入配置文件 app.config.from_object('config') 配置文件读取 app.run(host='0.0.0.0', debug=app.config['DEBUG'], port=90) 重要 app.config.from_object('config') 载入配置文件，使用时DEBUG必须大写 config 配置文件中的参数必须全部大写 DEBUG 的值默认值为 False ","date":"2020-03-13","objectID":"/en/flask01/:4:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"4.3 使用flask-script插件配置 4.3.1 安装使用 安装 pip3 install flask-script 使用app构建manager对象 manager = Manager(app=app) 使用manager启动程序 manager.run() 4.3.2 参数使用 -d #是否开启调试模式 -r #是否自动重新加载文件 -h, -host #指定主机 -p, -port #指定端口 -threaded #是否使用多线程 -?, -help #查看帮助 #示例： python3 manage.py runserver --help ","date":"2020-03-13","objectID":"/en/flask01/:4:3","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"5 请求流程 ","date":"2020-03-13","objectID":"/en/flask01/:5:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"6 路由 路由：将从客户端发送过来的请求分发到指定函数上 @app.route('/') def index(): return 'Index Page' @app.route('/hello') def hello(): return 'Hello,World' ","date":"2020-03-13","objectID":"/en/flask01/:6:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"6.1 变量规则 @app.route('/user/\u003cusername\u003e') def show_user_profile(username): # show the user profile for that user return 'User %s' % escape(username) @app.route('/post/\u003cint:post_id\u003e') def show_post(post_id): # show the post with the given id, the id is an integer return 'Post %d' % post_id @app.route('/path/\u003cpath:subpath\u003e') def show_subpath(subpath): # show the subpath after /path/ return 'Subpath %s' % escape(subpath) 笔记 参数 路径参数 位置参数 关键字参数 请求参数 get 参数在路径中？之后 post参数在请求体中 Flask中参数 都是关键字参数 默认标识是\u003c\u003e name需要和对应的视图函数的参数名字保持一致 参数允许有默认值 如果有默认值，那么在路由中，不传输参数也可以 如果没有默认值，参数在路由中必须传递 默认参数类型是字符串,写法 \u003cconverter:variable_name\u003e converter类型 string 默认值，会将/认为是参数分割符 int 接收整型 float 接收浮点型 path 接收到的数据格式是字符串，会将斜线/认为是一个字符 uuid 只接收uuid字符串，唯一码，一种生成规则 any 列出的元组中的任意一个 ","date":"2020-03-13","objectID":"/en/flask01/:6:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"6.2 唯一的URL / 重定向行为 以下的两条规则的不同之处在于是否使用尾部的/: @app.route('/projects/') def projects(): return 'The project page' @app.route('/about') def about(): return 'The about page' 笔记 projects 的 URL 是中规中矩的，尾部有一个斜杠，看起来就如同一个文件夹。 访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定向，在尾部加上一个斜杠。 about 的 URL 没有尾部斜杠，因此其行为表现与一个文件类似。如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助 搜索引擎避免重复索引同一页面。 ","date":"2020-03-13","objectID":"/en/flask01/:6:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"6.3 反向解析 url_for('函数名',参数名=value) 根据endpoint获取到对应的路径 endpoint默认就是函数的名字 如果有参数 url_for(‘函数名’,key=value,key=value) 反向解析在模板上可以直接使用 使用在app中 url_for(‘endpoint’) endpoint 默认是函数名字 使用在blueprint中 url_for(‘bluename.endpoint’) 蓝图名字.函数名 获取静态资源路径 url_for(‘static’,filename=‘path’) static 资源 path 相对于资源的路径 笔记 为什么不在把 URL 写死在模板中，而要使用反转函数 url_for() 动态构建？ 反转通常比硬编码 URL 的描述性更好。 可以只在一个地方改变 URL ，而不用到处乱找。 URL 创建会为你处理特殊字符的转义和 Unicode 数据，比较直观。 生产的路径总是绝对路径，可以避免相对路径产生副作用。 如果应用是放在 URL 根路径之外的地方（如在 /myapplication 中，不在 / 中）， url_for() 会妥善处理。 from flask import Flask, escape, url_for app = Flask(__name__) @app.route('/') def index(): return 'index' @app.route('/login') def login(): return 'login' @app.route('/user/\u003cusername\u003e') def profile(username): return '{}\\'s profile'.format(escape(username)) with app.test_request_context(): print(url_for('index')) print(url_for('login')) print(url_for('login', next='/')) print(url_for('profile', username='John Doe')) #运行结果 / /login /login?next=/ /user/John%20Doe ","date":"2020-03-13","objectID":"/en/flask01/:6:3","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"6.4 HTTP 方法 Web 应用使用不同的 HTTP 方法处理 URL 。当你使用 Flask 时，应当熟悉 HTTP 方法。 缺省情况下，一个路由只回应 GET 请求。 可以使用 route() 装饰器的 methods 参数来处理不同的 HTTP 方法: from flask import request @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': return do_the_login() else: return show_the_login_form() methods中指定请求方法 GET POST HEAD PUT DELETE ","date":"2020-03-13","objectID":"/en/flask01/:6:4","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"7 静态文件 动态的 web 应用也需要静态文件，一般是 CSS 和 JavaScript 理想情况下服务器已经配置好了提供静态文件的服务。但是在开发过程中， Flask 也能做好这项工作。只要在包或模块旁边创建一个名为 static 的文件夹就行了。 静态文件位于应用的 /static 中。 使用特定的 ‘static’ 端点就可以生成相应的 URL url_for('static', filename='style.css') # 这个静态文件在文件系统中的位置应该是 static/style.css ","date":"2020-03-13","objectID":"/en/flask01/:7:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8 模板 模板是呈现给用户的界面，在MVT中充当T的角色，实现了VT的解耦，开发中VT有着N:M的关系，一个V可以通用任意T，一个T可以被任意V调用。 模板处理分为两个过程： 加载 渲染 模板代码包含两个部分： 静态HTML 动态插入的代码段 Flask 会在 templates 文件夹内寻找模板。因此，如果应用是一个模块， 那么模板文件夹应该在模块旁边；如果是一个包，那么就应该在包里面： 情形 1 : 一个模块: /application.py /templates /hello.html 情形 2 : 一个包: /application /__init__.py /templates /hello.html ","date":"2020-03-13","objectID":"/en/flask01/:8:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8.1 Jinja2 Flask中使用Jinja2模板引擎 Jinja2由Flask作者开发 一个现代化设计和友好的Python模板语言 模仿Django的模板引擎 优点： 速度快，被广泛使用 HTML设计和后端Python分离 较少Python复杂度 非常灵活，快速和安全 提供了控制，继承等高级功能 Flask 自动配置 Jinja2 模板引擎。 使用 render_template()方法可以渲染模板，只要提供模板名称和需要作为参数传递给模板的变量就行了。下面是一个简单的模板渲染例子: from flask import render_template @app.route('/hello/') @app.route('/hello/\u003cname\u003e') def hello(name=None): return render_template('hello.html', name=name) ","date":"2020-03-13","objectID":"/en/flask01/:8:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8.2 模板语法 模板语法主要分为两种：变量、标签 8.2.1 变量 模板中的变量{{ var }} 视图传递给模板的数据 前面定义出来的数据 变量不存在，默认忽略 8.2.2 标签 模板中的标签{% tag %} 逻辑控制 使用外部表达式 创建变量 宏定义 ","date":"2020-03-13","objectID":"/en/flask01/:8:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8.3 结构标签 8.3.1 block {% block xxx %} {% endblock %} 块操作 父模板挖坑，子模板填坑 首次出现挖坑，非首次填坑 多次填坑会出现覆盖，不想覆盖使用{{super()}} 8.3.2 extends {% extends 'xxx' %} \u003c!--继承后保留块中的内容--\u003e {{super()}} 8.3.3 include {% include 'xxx' %} 包含，将其他html包含进来，体现的是由零到一的概念 能用block + extends实现的，尽量不要使用include 8.3.4 marco {% marco hello(name) %} {% endmarco %} {{name}} 宏定义，可以在html中定义函数 可以接收参数 通过调用函数生成html 支持导入操作 {% from xxx import yy %} ","date":"2020-03-13","objectID":"/en/flask01/:8:3","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8.4 for 循环 {% for item in cols %} AA {% else %} BB {% endfor %} 可以使用和Python一样的for...else 也可以获取循环信息loop loop.first loop.last loop.index loop.index() loop.revindex loop.revindex() ","date":"2020-03-13","objectID":"/en/flask01/:8:4","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8.5 过滤器 {{变量|过滤器|过滤器...}} 过滤器并不是先写先执行 safe最后做 capitalize 驼峰命名 lower 变为小写 upper 变为大写 title 标题 trim 去掉空格 reverse 反转 format 格式化 striptags 渲染之前，将值中标签去掉 ","date":"2020-03-13","objectID":"/en/flask01/:8:5","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"8.6 Flask-Bootstrap 官方文档：Flask-Bootstrap 8.6.1 安装 pip3 install flask-bootstrap 8.6.2 导入和加载扩展 from flask import Flask from flask_bootstrap import Bootstrap def create_app(): app = Flask(__name__) Bootstrap(app) return app # do something with app... 8.6.2 创建基于Bootstrap的模板 {% extends \"bootstrap/base.html\" %} {% block title %}This is an example page{% endblock %} {% block navbar %} \u003cdiv class=\"navbar navbar-fixed-top\"\u003e \u003c!-- ... --\u003e \u003c/div\u003e {% endblock %} {% block content %} \u003ch1\u003eHello, Bootstrap\u003c/h1\u003e {% endblock %} ","date":"2020-03-13","objectID":"/en/flask01/:8:6","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"9 Request from flask import request @app.route('/request', methods=['GET', 'POST']) def req(): print(request) print(request.method) print(request.data) # arguments 参数，get请求参数 print(request.args) print(request.args.get('name')) # post 相关请求都会有数据 print(request.form) print(request.files) print(requset.cookies) #ip地址 print(requset.remote_addr) # 浏览器标识 print(requset.user_agent) print(requset.user_url) ","date":"2020-03-13","objectID":"/en/flask01/:9:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"10 Response 服务器返回给客户端的数据 由程序员创建，返回Response对象 直接返回Response对象 通过make_response(data,code) -data 返回的数据内容 -code 状态码 返回文本的内容，状态码 返回模板 @app.route('/response') def(resp): result = render_template('hello.html') print(result) print(type(result)) response = make_response('\u003ch3\u003e响应\u003c/h3\u003e',400) print(response) print(type(response)) return response ","date":"2020-03-13","objectID":"/en/flask01/:10:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"11 重定向和错误 redirect() url_for(‘函数名’,参数=value) 使用 redirect() 函数可以重定向。使用 abort() 可以更早退出请求，并返回错误代码: from flask import abort, redirect, url_for @app.route('/') def index(): return redirect(url_for('login')) @app.route('/login') def login(): abort(401) this_is_never_executed() # 上例实际上是没有意义的，它让一个用户从索引页重定向到一个无法访问的页面（401 表示禁止访问）。 # 但是上例可以说明重定向和出错跳出是如何工作的。 缺省情况下每种出错代码都会对应显示一个黑白的出错页面。使用 errorhandler() 装饰器可以定制出错页面: from flask import render_template @app.errorhandler(404) def page_not_found(error): return render_template('page_not_found.html'), 404 #注意 render_template() 后面的 404 ，这表示页面对应的出错 代码是 404 ，即页面不存在。缺省情况下 200 表示：一切正常。 ","date":"2020-03-13","objectID":"/en/flask01/:11:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"12 JSON JSON 格式的响应是常见的，用 Flask 写这样的 API 是很容易上手的。如果从视图返回一个 dict ，那么它会被转换为一个 JSON 响应。 @app.route(\"/me\") def me_api(): user = get_current_user() return { \"username\": user.username, \"theme\": user.theme, \"image\": url_for(\"user_image\", filename=user.image), } 如果 dict 还不能满足需求，还需要创建其他类型的 JSON 格式响应，可以使用 jsonify() 函数。该函数会序列化任何支持的 JSON 数据类型。 @app.route(\"/users\") def users_api(): users = get_all_users() return jsonify([user.to_json() for user in users]) ","date":"2020-03-13","objectID":"/en/flask01/:12:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"13 蓝图 Blueprint 是一种组织一组相关视图及其他代码的方式。与把视图及其他 代码直接注册到应用的方式不同，蓝图方式是把它们注册到蓝图，然后在工厂函数中把蓝图注册到应用。 flask中用来解决上帝文件问题，将请求从主文件中拆分到多个文件中。 ","date":"2020-03-13","objectID":"/en/flask01/:13:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"13.1 插件安装 pip3 install flask-blueprint ","date":"2020-03-13","objectID":"/en/flask01/:13:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"13.2 初始化蓝图 # manager.py from flask import Flask from flask_script import Manager from App.views import bp app = Flask(__name__) # 在app中注册 app.register_blueprint(blueprint=bp) manager = Manager(app=app) if __name__ == '__main__' manager.run() # /App/views from flask import Blueprint # 创建一个类，构造一个蓝图 bp = Blueprint('bp',__name__) # 使用 @bp.route('/') def.hello(): return 'Hello Blueprint!' ","date":"2020-03-13","objectID":"/en/flask01/:13:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"14 Cookie 客户端会话技术 数据都是存储在浏览器中 支持过期 不能跨域名 不能跨浏览器 cookie是通过Response来进行操作 flask中的cookie可以直接支持中文 flask对cookie中的内容做了编码 # 读取cookie from flask import request @app.route('/') def index(): username = request.cookies.get('username') # use cookies.get(key) instead of cookies[key] to not get a # KeyError if the cookie is missing. # 存储cookie from flask import make_response @app.route('/') def index(): resp = make_response(render_template(...)) resp.set_cookie('username', 'the username') return resp ","date":"2020-03-13","objectID":"/en/flask01/:14:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"15 Session 服务端会话技术 对数据进行数据安全操作 默认在内存中 不容易管理 容易丢失 不能多台电脑协作 Flask-Session 默认有效期31天 ","date":"2020-03-13","objectID":"/en/flask01/:15:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"15.1 Session使用 from flask import Flask, session, redirect, url_for, escape, request app = Flask(__name__) # 使用会话之前必须设置一个密钥。 # Set the secret key to some random bytes. Keep this really secret! app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/' @app.route('/') def index(): if 'username' in session: return 'Logged in as %s' % escape(session['username']) return 'You are not logged in' @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': session['username'] = request.form['username'] return redirect(url_for('index')) return ''' \u003cform method=\"post\"\u003e \u003cp\u003e\u003cinput type=text name=username\u003e \u003cp\u003e\u003cinput type=submit value=Login\u003e \u003c/form\u003e ''' @app.route('/logout') def logout(): # remove the username from the session if it's there session.pop('username', None) return redirect(url_for('index')) ","date":"2020-03-13","objectID":"/en/flask01/:15:1","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"15.2 Flask-Session插件 官方文档：Flask-Session 安装 pip3 install Flask-Session 使用 from flask import Flask, session from flask.ext.session import Session app = Flask(__name__) # Check Configuration section for more details app.config['SESSION_TYPE'] = 'redis' Session(app=app) @app.route('/set/') def set(): session['key'] = 'value' return 'ok' @app.route('/get/') def get(): return session.get('key', 'not set') ","date":"2020-03-13","objectID":"/en/flask01/:15:2","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"16 消息闪现 闪现系统的基本工作原理是在请求结束时记录一个消息，提供且只提供给下一个请求使用。通常通过一个布局模板来展现闪现的消息。 flash() 用于闪现一个消息。在模板中，使用 get_flashed_messages() 来操作消息。 ","date":"2020-03-13","objectID":"/en/flask01/:16:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["Flask"],"content":"17 登录示例 from flask import Flask, flash,session, redirect, render_template, url_for, escape, request app = Flask(__name__) # Set the secret key to some random bytes. Keep this really secret! app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/' @app.route('/') def index(): if 'username' in session: return 'Logged in as %s' % escape(session['username']) return 'You are not logged in' @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': if request.form['username'] != 'admin' or \\ request.form['password'] != 'secret': flash(u'Invalid password provided', 'error') else: flash('You were successfully logged in') return redirect(url_for('index')) return render_template('login.html', error=error) @app.route('/logout') def logout(): # remove the username from the session if it's there session.pop('username', None) return redirect(url_for('index')) 以下是实现闪现的 layout.html 模板： \u003c!doctype html\u003e \u003ctitle\u003eMy Application\u003c/title\u003e {% with messages = get_flashed_messages() %} {% if messages %} \u003cul class=flashes\u003e {% for category, message in messages %} \u003cli\u003e class=\"{{ category }}\"\u003e{{ message }}\u003c/li\u003e {% endfor %} \u003c/ul\u003e {% endif %} {% endwith %} {% block body %}{% endblock %} 以下是继承自 layout.html 的 index.html 模板： {% block body %} \u003ch1\u003eOverview\u003c/h1\u003e \u003cp\u003eDo you want to \u003ca href=\"{{ url_for('login') }}\"\u003elog in?\u003c/a\u003e {% endblock %} 以下是同样继承自 layout.html 的 login.html 模板： {% extends \"layout.html\" %} {% block body %} \u003ch1\u003eLogin\u003c/h1\u003e {% if error %} \u003cp class=error\u003e\u003cstrong\u003eError:\u003c/strong\u003e {{ error }} {% endif %} \u003cform method=post\u003e \u003cdl\u003e \u003cdt\u003eUsername: \u003cdd\u003e\u003cinput type=text name=username value=\"{{ request.form.username }}\"\u003e \u003cdt\u003ePassword: \u003cdd\u003e\u003cinput type=password name=password\u003e \u003c/dl\u003e \u003cp\u003e\u003cinput type=submit value=Login\u003e \u003c/form\u003e {% endblock %} ","date":"2020-03-13","objectID":"/en/flask01/:17:0","tags":["Python3.5","Flask"],"title":"结合官方文档 入门Flask","uri":"/en/flask01/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸检测业务理论及实现","date":"2020-03-12","objectID":"/en/face06/","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 人脸检测业务理论及实现 ","date":"2020-03-12","objectID":"/en/face06/:0:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1 人脸业务场景综述 ","date":"2020-03-12","objectID":"/en/face06/:1:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1.1 生物信息识别 人脸识别是生物信息识别领域重要研究方向之一 生物特征有手形、指纹、脸形、虹膜、视网膜、脉搏、耳廓等 ","date":"2020-03-12","objectID":"/en/face06/:1:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1.2 人脸业务场景 1.2.1 人脸检测（Face Detection） 检测出图像中人脸所在位置的一项技术 基础提供支持 姿态和表情的变化 不同人的外观差异 光照、遮挡、视角 不同大小、位置 1.2.2 人脸关键点（人脸对齐 Face Alignment） 定位出人脸上五官等关键点坐标的一项技术 人脸美颜、活体检测等基础 人脸外观差异 角度、姿态、遮挡等问题 实时性 稠密关键点（\u003e68点） 1.2.3 人脸属性（Face Attribute） 识别出人脸的性别、年龄、姿态、表情等属性值的一项技术 人脸分析基础 人脸外观差异 角度、姿态、遮挡等问题 等等 1.2.4 人脸对比（Face Compare） 计算两个人脸之间的相似度 人脸验证（Face Verification) 人脸识别（Face Compere） 人脸检索（Face Retrieval） 人脸聚类（Face Cluster） 等等 1.2.5 其他人脸业务场景 人脸活体检测 情绪识别 面相分析 颜值评分 明星脸匹配 人脸生成 人脸美妆、美颜 人脸风格化 痘痘、皱纹检测 人脸换脸 ","date":"2020-03-12","objectID":"/en/face06/:1:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1.3 人脸业务流程 ","date":"2020-03-12","objectID":"/en/face06/:1:3","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1.4 人脸采集相关问题 不同性别分布，男性、女性。 不同年龄分布，儿童、少年、中年、老年。 不同人种分布，黑人、白人、黄种人。. 不同脸型分布，人脸、猪脸、猴脸。 人脸没有正对摄像头，角度有倾斜，左右倾斜、. 上下倾斜。 翻拍的人脸照片，清晰照片、不清晰照片。 摄像头内包含单张人脸、多张人脸。 测试所处的环境:光线正常、过亮、过暗、暖光、冷光、白平衡等 不同场景:室内、室外、车站、超市等 ","date":"2020-03-12","objectID":"/en/face06/:1:4","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1.5 人脸资源——相关数据集 PubFig: Public Figures Face Database(哥伦比亚大学公众人物脸部数据库) Large-scale CelebFaces Attributes (CelebA) Dataset Colorferet Multi-Task Facial Landmark (MTFL) dataset BiolD Face Database - FaceDB Labeled Faces in the Wild Home (LFW) Person identification in TV series CMUVASC \u0026 PIE Face dataset YouTube Faces Wider-face MegaFace CASIA-FaceV5 The CNBC Face Database CASIA-3D FaceV1 IMDB-WIKI FDDB Caltech人脸数据库 The Japanese Female Facial Expression (JAFFE) Database ","date":"2020-03-12","objectID":"/en/face06/:1:5","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"1.6 人脸资源——相关厂商 ","date":"2020-03-12","objectID":"/en/face06/:1:6","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"2 人脸检测问题 什么是人脸检测问题？ 从图像中找到人脸的位置 人脸检测的用处？ 更准确的人脸业务 人脸识别 人脸对比 人脸关键点 人脸属性 ","date":"2020-03-12","objectID":"/en/face06/:2:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"3 人脸标注方法 ","date":"2020-03-12","objectID":"/en/face06/:3:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"3.1 矩形框 传统方法都采用矩形标记法，用一个矩形框将画面中的人脸区域包含在内。这种标记方法存在的问题在于很难给出一个恰好包含面部的矩形框，并且获得各种不同算法的一致的认可。因此采用矩形框的方法无法很好的对不同算法的结果做出准确且有效的评价。 常用四个值来标定(x,y,w,h) (x,y)表示矩形左上角的坐标，w 矩形的宽，h 矩形的高 优点：网络学习起来更容易，目前很多人脸检测算法框架也采用矩形框标注的方法。 缺点：标注的区域中一部分并不属于人脸。 ","date":"2020-03-12","objectID":"/en/face06/:3:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"3.2 椭圆形标注 由于人脸天然呈现为椭圆形，所以用椭圆形来表征是一种较为准确的方法，如下图所示,这种方法可以对侧脸与转动后的面部进行描述，常用5个值来标定。 ra：椭圆长轴半径 rb：椭圆短轴半径 theta：椭圆长轴偏转角度 cx：椭圆圆心x坐标 cy：椭圆圆心y坐标 ","date":"2020-03-12","objectID":"/en/face06/:3:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"4 人脸检测性能评价指标 ","date":"2020-03-12","objectID":"/en/face06/:4:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"4.1 检测率、误报率 检测率 = 正确检出人脸个数/真实人脸个数 误报率 = 检出目标中错误的人脸数量/总共检测出的目标数量 每一个标记真值:GT只允许有一个检测与之相对应 重复检测会被视为错误检测 ","date":"2020-03-12","objectID":"/en/face06/:4:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"4.2 速度：FPS ","date":"2020-03-12","objectID":"/en/face06/:4:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"4.3 IOU(Intersection-over-Union) $IOU = \\dfrac{area(C) \\bigcap area(G)}{area(C) \\bigcup area(G)}$ 产生的候选框（candidate bound）与原标记框（ground truth bound）的交叠率,即它们的交集与并集的比值。 最理想情况是完全重叠，即比值为1。 ","date":"2020-03-12","objectID":"/en/face06/:4:3","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"4.4 Precision-Recall/ROC accuracy $ =\\frac{TP}{P+N}$ 符号 含义 p Positive 正样本数量 n Negative 负样本数量 Y 预测为正样本数量 N 预测为负样本数量 4.4.1 PR曲线 precisidon$ =\\frac{TP}{TP+FP}$ recall$ = \\frac{TP}{P}$ 符号 以人脸识别（PR）为例 p 真实人脸区域 n 真实背景区域 Y 检出的人脸框 N 没有检出区域 11-point interpolated average precision 4.4.2 ROC曲线 前提：当前图片智能有一个人脸 通常用于FDDB数据集 fp rate$ =\\frac{FP}{N}$ tp rate $= \\frac{TP}{P}$ 以人脸识别（ROC）为例 p 图片中存在人脸的图片 n 图片中不存在人脸的图片 Y 在当前图片中检测出人脸 N 在当前图片中没有检测出人脸 ","date":"2020-03-12","objectID":"/en/face06/:4:4","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"5 人脸检测方法介绍 ","date":"2020-03-12","objectID":"/en/face06/:5:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"5.1 传统的人脸检测方法 笔记 VJ(Viola-Jones)框架算法要点: 使用类Haar输入特征：对矩形图像区域的和或差进行阈值化。 积分图像技术加速了矩形图像区域的45度旋转的值的计算，这个图像结构被用来加速类Haar输入特征的计算。 使用Adaboost来创建二分类问题（人脸与非人脸）的分类器节点（高通过率，低拒绝率）。 把分类器节点组成筛选式级联（在筛选式级联里，一个节点是Adaboost类型的一组分类器）。 DPM DPM算法由Felzenszwalb提出，是一种基于部件的检测方法， 对目标的形变具有很强的鲁棒性。目前DPM已成为众多分类、分割、姿态估计等 算法的核心部分，Felzenszwalb本人也因此被VOC授予\"终身成就奖\"。 DPM算法采用了改进后的HOG特征，SVM分类器和滑动窗口（Sliding Windows）检测思想， 针对目标的多视角问题，采用了多组件（Component）的策略，针对目标本身的形变问题， 采用了基于图结构（Pictorial Structure）的部件模型策略。 此外，将样本的所属的模型类别，部件模型的位置等作为潜变量（Latent Variable）， 采用多示例学习（Multiple-instance Learning）来自动确定。 JDA（Joint Cascade Face Detection and Alignment） 目前比较先进的人脸检测算法.它结合了 cascade 和 alignment ，一方面做alignment对进一步的人脸识别意义重大， 另一方面作者在 section 2 讲到了landmark附近的特征可促进分类器分辨出更准确的结果， 最后，将这两者放在一起做不仅相互促进而且还相互节省了时间。 ","date":"2020-03-12","objectID":"/en/face06/:5:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"5.2 从粗粒度到细粒度的级联模型（Deep Learning） ","date":"2020-03-12","objectID":"/en/face06/:5:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"5.3 通用目标检测算法+基于人脸问题的优化 通用目标检测算法 人脸检测算法 人脸检测相关文献： http://www.imooc.com/article/284277 ","date":"2020-03-12","objectID":"/en/face06/:5:3","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"6 人脸检测问题挑战及解决思路 人脸可能出现在图像中的任何一个位置 人脸可能有不同的大小 人脸在图像中可能有不同的视角和姿态 人脸可能部分被遮挡 ","date":"2020-03-12","objectID":"/en/face06/:6:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"7 小人脸检测问题/策略 ","date":"2020-03-12","objectID":"/en/face06/:7:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"7.1 小人脸检测问题 下采样倍率很大时，人脸区域基本消失 相比于感受野和anchor的尺寸来说，人脸的尺寸太小 Anchor匹配策略（IOU小且变化敏感） 正负样本比例失衡 ","date":"2020-03-12","objectID":"/en/face06/:7:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"7.2 小人脸检测问题策略 尺度不敏感/多尺度的策略 调整优化Anchor策略 在线的难例挖掘 IOU计算方式 数据增强 ","date":"2020-03-12","objectID":"/en/face06/:7:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"8 SSD模型 ","date":"2020-03-12","objectID":"/en/face06/:8:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"8.1 Single Shot MultiBox Detector(one-stage方法) Wei Liu在ECCV 2016提出 端到端的训练 直接回归目标类别和位置 不同尺度的特征图上进行预测 ","date":"2020-03-12","objectID":"/en/face06/:8:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"8.2 SSD模型介绍 主干网络：VGGNet 多尺度Feature Map预测 Default bounding boxes的类别分数、偏移量 8.2.1 Anchor Anchor指特征图上的每一个点 8.2.2 Default box m*n个单元，每个单元称作一个Anchor 每个单元上生成固定尺度和长宽比的box 假设一个特征图有mxn个单元，每个单元对应k个default box,每个default box预测c个类别概率分布和4个坐标 (c+4)*k*m*n个输出值 8.2.3 Prior box 实际选择的default box 38*38*4 + 19*19*6 + 10*10*6 + 5*5*6 + 3*3*4+1*1*4= 8732个prior box 8.2.4 损失函数 $$L(x,c,l,g)=\\dfrac{1}{N} (L_{conf}(x,c)+\\alpha L_{loc}(x,l,g))$$ 8.2.5 样本构造 正样本 从GT box出发给找到最匹配的prior box放入候选正样本集 从prior box集出发，寻找与GT box满足lOU\u003e 0.5的最大prior box放入候选正样本集 负样本 难例挖掘 正负样本比 1:3 8.2.6 数据增强 随机采样多个path,与物体之间最小的jaccard overlap为: 0.1, 0.3, 0.5, 0.7与0.9 采样的区域比例是[0.3, 1.0]， aspect ratio 在0.5或2 GTbox中心在采样区域中且面积大于0 Resize到固定大小 以0.5的概率随机的水平翻转 ","date":"2020-03-12","objectID":"/en/face06/:8:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"8.3 TensorFlow+SSD环境搭建 笔记 安装TensorFlow环境 TensorFlow-gpu版本1.12以上 https://github.com/tensorflow/models.git 目标检测算法源码框架 安装教程 ","date":"2020-03-12","objectID":"/en/face06/:9:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"9 人脸检测数据集 ","date":"2020-03-12","objectID":"/en/face06/:10:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"9.1 WIDER FACE 数据集 笔记 WIDER FACE数据集 由香港中文大学提出 32203个图像和393703个人脸图像 在尺度，姿势，遮挡，表情，装扮，光照等 61个事件类别组织的，对于每一个事件类别，选取其中的40%作为训练集,10%用于交叉验证，50%作为测试集 下载地址：http://shuoyang1213.me/WIDERFACE/ ","date":"2020-03-12","objectID":"/en/face06/:10:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"9.2 Passcal VOC 对于WIDER FACE数据集，我们首先会将他转化为Passcal VOC格式 VOC主要有三个重要的文件夹 笔记 Annotations 存放标注信息 ImageSets 存放训练和测试用到的文件列表 JPEGImages 存放图片信息 VOC数据基本结构 \u003cannotaion\u003e \u003cfloder\u003ewiderface\u003c/floder\u003e \u003cfilename\u003e0--Parade_0_Parade_marchingband_1_5.jpg\u003c/filename\u003e #指向了JPEGImage下面的一个图片 \u003csource\u003e #图片来源 \u003cdatabse\u003ewider face Database\u003c/databse\u003e \u003cannotation\u003ePASCAL VOC2007\u003c/annotaion\u003e \u003cimage\u003eflickr\u003c/image\u003e \u003cflickrid\u003e1\u003c/flickerid\u003e \u003csource\u003e \u003cowner\u003e \u003cflickerid\u003eieblyang\u003c/flickerid\u003e \u003cname\u003eieblyang\u003c/name\u003e \u003c/owner\u003e \u003csize\u003e #当前图片的尺寸，通道数 \u003cwidth\u003e1024\u003c/width\u003e \u003cheight\u003e683\u003c/height\u003e \u003cdepth\u003e3\u003c/depth\u003e \u003c/size\u003e \u003csegmented\u003e0\u003c/segmented\u003e \u003cobject\u003e #一个object对应一个人脸 \u003cname\u003eface\u003c/name\u003e \u003cpose\u003eUnspecified\u003c/poss\u003e \u003ctruncated\u003e1\u003c/truncated\u003e \u003cdiffcult\u003e0\u003c/diffcult\u003e \u003cbndbox\u003e#记录了矩形框的坐标值 \u003cxmin\u003e495\u003c/xmin\u003e \u003cymin\u003e347\u003c/ymin\u003e \u003cxmax\u003e532\u003c/xmax\u003e \u003cymax\u003e398\u003c/ymax\u003e \u003c/bndbox\u003e \u003c/object\u003e ... \u003c/annotaion\u003e ","date":"2020-03-12","objectID":"/en/face06/:10:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"9.3 WIDER FACE 标注文件 # wider_face_train_bbx_gt.txt 0--Parade/0_Parade_marchingband_1_849.jpg # 图片路径 1 # 针对当前图片中的人脸个数 449 330 122 149 0 0 0 0 0 0 # 当前人脸的标准信息 ↑ ↑ 前两个值人脸框左上角坐标 ↑ ↑ 第三四个值表示人脸框的大小 ↑ ↑ ↑ ↑ ↑ ↑ 后六个值分别表示Scale、Pose、Occlusion、Expression、Makeup、Illumation 利用这六个值可以对人脸数据进行清洗 ","date":"2020-03-12","objectID":"/en/face06/:10:3","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"10 实例代码 ","date":"2020-03-12","objectID":"/en/face06/:11:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"10.1 数据集处理 WIDER FACE数据集在使用前，需要将它转化为Passcal VOC2007格式。Passcal VOC2007格式主要有三个重要的文件夹，Annotations用来存放标注信息，ImageSets存放训练和测试用到的文件列表，JPEGImages用来存放图片信息。 第一步，将WIDER FACE解析好的数据写入到xml文件中，处理时需要获取图片的基本信息，代码如下： size = doc.createElement('size') # 获取图片的基本信息 annotation.appendChild(size) width = doc.createElement('width') # 宽度 width.appendChild(doc.createTextNode(str(saveimg.shape[1]))) height = doc.createElement('height') # 高度 height.appendChild(doc.createTextNode(str(saveimg.shape[0]))) depth = doc.createElement('depth') # 通道数量 depth.appendChild(doc.createTextNode(str(saveimg.shape[2]))) 在这一步中，需要获取到人脸的坐标信息，代码如下： # bboxes 当前图片中人脸框的坐标 for i in range(len(bboxes)): bbox = bboxes[i] objects = doc.createElement('object') annotation.appendChild(objects) object_name = doc.createElement('name') object_name.appendChild(doc.createTextNode('face')) objects.appendChild(object_name) pose = doc.createElement('pose') pose.appendChild(doc.createTextNode('Unspecified')) objects.appendChild(pose) truncated = doc.createElement('truncated') truncated.appendChild(doc.createTextNode('0')) objects.appendChild(truncated) difficult = doc.createElement('difficult') difficult.appendChild(doc.createTextNode('0')) objects.appendChild(difficult) bndbox = doc.createElement('bndbox') objects.appendChild(bndbox) xmin = doc.createElement('xmin') xmin.appendChild(doc.createTextNode(str(bbox[0]))) bndbox.appendChild(xmin) ymin = doc.createElement('ymin') ymin.appendChild(doc.createTextNode(str(bbox[1]))) bndbox.appendChild(ymin) xmax = doc.createElement('xmax') xmax.appendChild(doc.createTextNode(str(bbox[0] + bbox[2]))) bndbox.appendChild(xmax) ymax = doc.createElement('ymax') ymax.appendChild(doc.createTextNode(str(bbox[1] + bbox[3]))) bndbox.appendChild(ymax) 第二步，对WIDER FACE数据集的训练集和测试集的真值文件进行解析。在这一过程中，需要对WIDER FACE数据集进行简单的数据清洗操作，使训练数据更加接近实际的业务场景，主要代码如下： sc = max(im_data.shape) im_data_tmp = numpy.zeros([sc, sc, 3], dtype = numpy.uint8) off_w = (sc - im_data.shape[1]) // 2 off_h = (sc - im_data.shape[0]) // 2 # 对图片进行周围填充，填充为正方形 im_data_tmp[off_h:im_data.shape[0] + off_h, off_w:im_data.shape[1] + off_w, ...] = im_data im_data = im_data_tmp numbox = int(gt.readline()) bboxes = [] for i in range(numbox): line = gt.readline() infos = line.split(\" \") for j in range(infos.__len__() - 1): infos[j] = int(infos[j]) # 数据清洗：保留resize到640×640 尺寸在8×8以上的人脸 if infos[2] * 80 \u003c im_data.shape[1] or infos[3] * 80 \u003c im_data.shape[0]: continue bbox = (infos[0] + off_w, infos[1] + off_h, infos[2], infos[3]) bboxes.append(bbox) 第三步，以SSD模型中的create_pascal_tf_record.py脚本为基础新建create_face_tf_record.py脚本对已经转化成Passcal VOC2007格式的训练样本和测试样本分别进行打包，在这一过程中需要将源码中的YEARS修改为widerface，将label_map_path指定到face_lable_map.pbtxt，训练集数据打包的命令参数如下： python3 object_detection/dataset_tools/create_face_tf_record.py \\ --data_dir=/mnt/dataset \\ --year=widerface \\ --output_path=/mnt/dataset/widerface/TF-data/train.record \\ --set=train ","date":"2020-03-12","objectID":"/en/face06/:11:1","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"10.2 模型训练 在SSD模型训练中，主要用到的是model_main脚本，由于源码中没有提供专门针对于resnet_50_v1_fpn这一结构的配置文件，所以在选取主干网络时，以ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync.config 为基础进行修改，将其修改为用于人脸检测任务的配置文件，并将修改好的配置文件重命名为ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_ sync_face.config，模型主要用于解决人脸识别问题，所以需要将num_classes设置为1。在训练过程中不需要用到预训练模型，所以将预训练模型fine_tune_checkpoint删除或注释掉，最后，修改输入输出的数据。 模型训练的命令及参数配置如下： python3 object_detection/model_main.py \\ --pipeline_config_path= \\ /mnt/FaceAI/models/research/object_detection/samples/configs/ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync_face.config --model_dir=/mnt/dataset/widerface/resnet50v1-fpn \\ --num_train_steps=100000 \\ --alsologtostder \\ 模型训练中，预设的训练次数为100000次，通过观察tensorboard中的loss曲线，模型训练的loss在40000次后已经趋于稳定，在训练74839次时停止了模型的训练，总的loss曲线如下图所示： ","date":"2020-03-12","objectID":"/en/face06/:11:2","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"10.3 模型固化 在模型结束后，使用tensorflow models提供的export_interence_graph.py脚本将已经训练好的模型打包成pb文件，命令与参数配置如下： python3 object_detection/export_inference_graph.py \\ --input_type =image_tensor \\ --popeline_config_path= \\ /mnt/FaceAI/models/research/object_detection/samples/configs/ssd_resnet50_v1_fpn_shared_box_predictor_640x640_coco14_sync_face.config \\ --trained_checkpoint_prefix= \\ /mnt/FaceAI/dataset/widerface/model/resnet50v1-fpn/model.ckpt-75065 --output_directory= \\ /mnt/FaceAI/dataset/widerface/model/resnet50v1-fpn/pb ","date":"2020-03-12","objectID":"/en/face06/:11:3","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"10.4 模型测试 在模型测试中，利用graph构图后，使用opencv读取用于测试的人脸图片，如果阈值大于0.6则表示识别出人脸，对识别出人脸的图片进行人脸框绘制，并将结果显示出来，实现代码如下： for image_path in im_path_list: imdata = cv2.imread(image_path) sp = imdata.shape imdata = cv2.resize(imdata, IMAGE_SIZE) output_dict = run_inference_for_single_image( imdata, detection_graph ) for i in range(len(output_dict['detection_scores'])): if output_dict['detection_scores'][i] \u003e 0.6: bbox = output_dict['detection_scores'][i] y1 = int(IMAGE_SIZE[0] * bbox[0]) x1 = int(IMAGE_SIZE[1] * bbox[1]) y2 = int(IMAGE_SIZE[0] * bbox[2]) x2 = int(IMAGE_SIZE[1] * bbox[3]) cv2.rectangle(imdata, (x1,y1), (x2,y2), (0,255,0), 2) cv2.imshow(\"im\", imdata) cv2.waitKey(0) 模型测试的结果如下图所示： ","date":"2020-03-12","objectID":"/en/face06/:11:4","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"11 参考资料 参考资料 FDDB人脸检测算法评价标准 目标检测 IOU（交并比） 理解笔记 走近人脸检测（2）——VJ人脸检测器及其发展 Viola-Jones人脸检測 DPM目标检测算法 解读 Joint Cascade Face Detection and Alignment 人脸检测算法 人脸识别技术大总结1——Face Detection \u0026 Alignment ","date":"2020-03-12","objectID":"/en/face06/:12:0","tags":["FaceRecognition","TensorFlow","FaceDetection"],"title":"人脸检测业务理论及实现","uri":"/en/face06/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现  Tensorflow Cifar-10图像分类任务","date":"2020-03-12","objectID":"/en/face05/","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 Tensorflow Cifar-10图像分类任务 ","date":"2020-03-12","objectID":"/en/face05/:0:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"1 Cifar10图像分类任务 CIFAR-10数据集包含10小类，60000个32*32的彩色图像。有50000个训练图像和10000个测试图像 CIFAR-100数据集包含100小类，每小类包含600个图像，其中有500个训练图像和100个测试图像。100类被分组为20个大类。每个图像带有1个小类的\"fine”标签和1个大类\"coarse\"标签。 ","date":"2020-03-12","objectID":"/en/face05/:1:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"2 Cifar10图像数据解析 def unpickle(ile): import pickle with open(file,'rb') as fo: dict = pickle.load(fo,encoding='bytes') return dict ","date":"2020-03-12","objectID":"/en/face05/:2:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"3 Cifar10数据打包和数据读取 tf.train.string input producer Train.tfrecord Test.tfrecord ","date":"2020-03-12","objectID":"/en/face05/:3:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"4 TensorFlow训练框架搭建 Data Net Loss Summary Session ","date":"2020-03-12","objectID":"/en/face05/:4:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"5 TensorFlow挑战Cifar10编程案例 训练代码 测试代码 Tensorboard调试 模型优化 ","date":"2020-03-12","objectID":"/en/face05/:5:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"6 如何优化Cifar10图像分类任务 更多的数据增强策略，比如: mixup等 更好的主干网络结构，比如: SENet等 更好的标签策略，比如: Soft-label策略 更好的loss设计，比如:采用分类+回归smooth-l1 loss等 不同的优化器、参数初始化方法等 ","date":"2020-03-12","objectID":"/en/face05/:6:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"7 实例代码 https://github.com/ieblYang/CIFAR-10 – ieblYang ","date":"2020-03-12","objectID":"/en/face05/:7:0","tags":["FaceRecognition","TensorFlow","Cifar-10"],"title":"Tensorflow Cifar-10图像分类任务","uri":"/en/face05/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 TensorFlow基础串讲","date":"2020-03-12","objectID":"/en/face04/","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 TensorFlow基础串讲 ","date":"2020-03-12","objectID":"/en/face04/:0:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"1 什么是TensorFlow？ Google开源的基于数据流图的科学计算库，适合用于机器学习、深度学习等人工智能领； https://github.com/tensorflow https://github.com/tensorflow/models Tensor(张量、数据)+Flow（数据流、数据流向）=TensorFlow（整个数据按一定的方向流动，在流动的同时需要进行一系列的运算） ","date":"2020-03-12","objectID":"/en/face04/:1:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"2 TensorFlow的架构 前端：编程模型、构造计算图、Python、C++、Java（计算图的设计） 后端：运行计算图、C++（计算图的搭建） ","date":"2020-03-12","objectID":"/en/face04/:2:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"3 TensorFlow的优点 高度的灵活性（支持非常原子的操作，比如 +、-、*、/ 、与或非等基本运算，提供了非常丰富的API接口） 真正的可移植性（底层采用C实现） 将科研与产品联系在一起（采用TensorFlow进行的科研模型可以直接用在产品上） 自动求微分 多语言支持（Python、C++、Java） 性能最优化（由Google维护） 社区内容丰富（Github收藏量远远高于其他深度学习模块） ","date":"2020-03-12","objectID":"/en/face04/:3:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"4 TensorFlow中的基本概念 ","date":"2020-03-12","objectID":"/en/face04/:4:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"4.1 Graph 图描述了计算的过程，可以通过tensorboard图形化流程结构 声明（单个/多个） 保存为pb文件（包括网络结构和网络参数） 从pb中恢复Graph TensorFlow可视化 #声明 g = tf.Graph() g = tf.get_default_graph() g = tf.constant(0) g = x.graph #如何声明和交叉使用多个Graph？ g1 = tf.Graph() with g1.as_default(): x1 = tf.constant(1.0,name=\"x1\") g2 = tf.Graph() with g2.as_default(): x2 = tf.constant(2.0,name=\"x2\") with tf.Session(graph=g2) as sess1: x1_list = tf.tf.import_graph_def(g1.as_graph_def, return_elements = [\"x1:0\"],name = \"\") print(sess_1.run(x1_list[0] + x2))) #保存pb g1 = tf.Graph() tf.train.write_graph(g1.as_graph_def(),'.','graph.pb',False) #从pb中恢复Graph #load graph with gfile.FastGFile(\"graph.pb\",'rb') as f: graph_def = tf.GraphDef() graph_def.ParseFromString(f.read()) tf.import_graph_def(graph_def,name='') sess = tf.Session() c1_tensor = sess.graph.get_tensor_by_name(\"c1:0\") #获取计算图的节点 c1 = sess.run(c1_tensor) #计算计算图相应节点的值 #使用tensorboard可视化计算图结构 import tensorflow as tf a = tf.constant(1,name='input a') #定义常量 b = tf.constant(2,name='input b') c = tf.multiply(a,b,name='maltiply_c') d = tf.add(a,b,name='add_d') e = tf.add(d,c,name='add_e') sess = tf.Session() sess.run(e) writer = tf.summary.FileWriter('graph',sess.graph) ","date":"2020-03-12","objectID":"/en/face04/:4:1","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"4.2 Session 图必须在称之为“会话”的上下文中执行。 会话将图的op（操作）分发到诸如CPU或GPU之类的设备上执行。 前段和后端的沟通，起到桥梁的作用 #创建和关闭会话 sess = tf.Session() #常用 sess = tf.InteractiveSession() #交互式，对交互性要求比较高的脚本中，希望实时看到脚本运行的结果 with tf.Session() as Sess: #定义Session的作用域，和sess = tf.Session() 等价 ... sess.close() #注入机制,完成计算图的运算，桥梁作用 sess.run(...) sess.run(tf.global_variables_initializer()) a = tf.placeholder(dtype=tf.float32) b = tf.placeholder(dtype=tf.float32) add = a + b add_val = sess.run(add,feed_dict={a:1,b:2}) #制定资源设备 a = tf.placeholder(dtype=tf.float32) b = tf.placeholder(dtype=tf.float32) add = a + b with tf.Session() as sess: with tf.device(\"/cpu:0\") print(sess.run(ass,feed_dict = {a:1,b:1})) #资源分配-控制GPU资源使用率 config = tf.ConfigProto() config.gpu_options.allow_growth = True #按需分配 session = tf.Session(config=config,...) ","date":"2020-03-12","objectID":"/en/face04/:4:2","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"4.3 Tensor 在TensorFlow中，所有在结点之间传递的数据都为Tensor对象 N维数组，图像：（batch*height*width*channel） #Tensor的定义 #tf.constant() 常量 cons = tf.constant(value=[1,2],dtype=tf.float32,shape=(1,2),name='testconst',verify_shape=False) # 取值 类型 形状 名称 形状是否可以改变 #tf.Variable() 变量 W = tf.Variable(tf.zeros([3,10]),dtype=tf.float64,name='W') #tf.placeholder() 占位符 X = tf.placeholder(dtype=tf.float32,shape=[144,10],name='X') X = tf.placeholder(dtype=tf.float32,shape=[None,None],name='X') #tf.SparseTensor() 稀疏的张量 ","date":"2020-03-12","objectID":"/en/face04/:4:3","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"4.4 Operation TensorFlow Graph 中的计算节点，输入输出均为Tensor 调用Session.run(tensor)或者tensor.eval()方可获取该Tensor的值 ","date":"2020-03-12","objectID":"/en/face04/:4:4","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"4.5 Feed 通过feed为计算图注入值 a = tf.placeholder(tf.float32) b = tf.placeholder(tf.float32) c = tf.add(a,b) with tf.Session() as sess: result = sess.run(c,feed_dict={a:3,b:4}) print(result) ","date":"2020-03-12","objectID":"/en/face04/:4:5","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"5 TensorFlow在深度学习中使用的API tf.split(split_dam,num_split,value,name='split') tf.concat(concat_dim,values,name='concat') tf.cast() tf.reshape() tf.equal() tf.matmul(a,b) tf.argmax() tf.squeeze() #tf.nn tf.nn.conv2d tf.nn.max_pool tf.nn.avg_pool tf.nn.relu tf.nn.dropout tf.nn.l2_normalize tf.nn.batch_normalization tf.nn.l2_loss tf.nn.softmax_cross_enyropy_with_logits #tf.train tf.train.Saver.save tf.train.Saver.restore tf.train.GradientDescentOptimizer(0.01).minimize(loss) tf.train.exponential_decay(1e-2,global_step,decay_steps=sample_size/batch,decay_rate=0.98,staircase=True) tf.train.string_input_producer(filenames,num_epochs=num_epochs,shuffle=True) tf.train.shuffle_batch([example,lable],batch_size=batch_size,capacity=capacity,min_after_dequeue=min_after_dequeue) tf.train.Coordinator tf.train.start_queue_runners(sess=sess,coord=coord ","date":"2020-03-12","objectID":"/en/face04/:5:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"6 TensorFlow中的数据操作 TensorFlow提供了TFRecord的格式来统一存储数据 ","date":"2020-03-12","objectID":"/en/face04/:6:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"6.1 TFRecord TFRecord将图像数据和标签放在一起的二进制文件（protocol buffer），能更好的利用内存，实现快速的复制，移动， 读取，存储 数据读取：tf.train.string_input_producer 数据解析：tf.TFRecordReader、tf.parse_single_example 数据写入：tf.python_io.TFRecordWriter ","date":"2020-03-12","objectID":"/en/face04/:6:1","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"6.2 数据写入相关的API方法 writer = tf.python_io.TFRecordWriter() example = tf.train.Example() writer.close() writer.writer(example.SerializeToString()) ","date":"2020-03-12","objectID":"/en/face04/:6:2","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"6.3 数据读取相关的API方法 直接从文件中读取图片 从TF-Record中解析打包的图片数据 tf.train.string_input_producer、tf.train.slice_input_producer tf.data库（动态图机制） ","date":"2020-03-12","objectID":"/en/face04/:6:3","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7 TensorFlow在深度学习中高级封装 ","date":"2020-03-12","objectID":"/en/face04/:7:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.1 TensorFlow在深度学习中使用的API #slim slim layers slim.arg_scope slim.data slim evaluation slim learning slim losses slim nets slim variables slim metrics ","date":"2020-03-12","objectID":"/en/face04/:7:1","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.2 slim.arg_scope arg_scope(list_ops_or_scope,**kwargs) list_ops_or_scope:操作列表或作用域列表 kwargs: 参数，以keyword=value方式显示 net = slim.conv2d(inputs,64, [11, 11],4, padding='SAME', weights_initializer= tf.truncated_normal_initializer (stddey=0.01)， weights_regularizer= slim.12_regularizer(0.0005),scope='convl') with slim.arg_scope ([slim.conv2d],padding='SAME', weights_initializer= tf.truncated normal initializer(stddev=0.01) weights_regularizer= slim.12_regularizer(0. 0005)): net = slim.conv2d (inputs, 64,[11， 11], scope='conv1') net = slim.conv2d (net, 128,[11， 11], padding='VALID', scope= 'conv2') net = slim.conv2d(net， 256,[11， 11], scope= 'conv3') ","date":"2020-03-12","objectID":"/en/face04/:7:2","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.3 BatchNorm层使用技巧 #slim.batch_norm()函数 normalizer_fn = slim.batch_norm normalizer_params = batch_norm_params #batch_norm_params 'is_training':is_training, 'zero_debias_moving_mean':True, 'decay':batch_norm_decay, 'epsilon':batch_norm_epsilon, 'scale':batch_nrom_scale, 'updates_collections':tf.GraphKeys.UPDATE_OPS, with slim.arg_ scope( [slim.conv2d], weights_regularizer=slim.12_regularizer(weight_decay), weights_initializer=slim.variance_scaling_initializer(), activation_fn=tf.nn.relu, normalizer_fn=slim.batch_ norm, normalizer_params=batch_norm_params) : with slim.arg_scope([slim.batch_norm], **batch_norm_params ): with slim.arg_scope([slim.max_pool2d], padding='SAME') as arg_SC: return arg_SC update_ops = tf.get_collection(tf.GraphKeys.UPDATE OPS) with tf.control_dependencies(update_ops): train step = tf.train. GradientDescentoptimizer (0.01). minimize (total_loss) batchnorm updates = tf.get_collection (UPDATE_OPS_COLLECTION) batchnorm updates_op = tf.group (*batchnorm_updates) ","date":"2020-03-12","objectID":"/en/face04/:7:3","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.4 slim net from tensorflow.contrib.slim.python.slim.nets import alexnet from tensorflow.contrib.slim.python.slim.nets import inception from tensorflow.contrib.slim.python.slim.nets import oxerfeat from tensorflow.contrib.slim.python.slim.nets import resnet_utils from tensorf1ow.contrib.slim.python.slim.nets import resnet_v1 from tensorflow.contrib.slim.python.slim.nets import resnet_v2 from tensorflow.contrib.slim.python.slim.nets import ygg ","date":"2020-03-12","objectID":"/en/face04/:7:4","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.5 slim loss 经验风险小 分类损失 平方损失 等等 正则化LOSS 变量的L2正则化约束 weights_ regularizer = slim.12 regularizer (0.0005) ) loss_val = tf.nn.12_loss (var) regularization_loss = tf.add_n( slim.losses.get_regularization_losses() ) total_loss1 = classification_loss + sum_of_squares_loss + pose_loss + regularization_loss slim.losses.add_loss(pose_loss) total_loss2 = slim.losses.get_total_loss() ","date":"2020-03-12","objectID":"/en/face04/:7:5","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.6 slim learn 梯度/学习率/BP 学习率更新 优化函数 等等 学习率 tf.train.piecewise_constant 分段常数衰减 tf.train.inverse_time_decay 反时限衰减 tf.train.polynomial_decay 多项式衰减 tf.train.exponential_decay 指数衰减 ... ","date":"2020-03-12","objectID":"/en/face04/:7:6","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.7 slim metrics TF-Slim提供了一系列度量操作，使评估模型变得简单 value_ op是一个幂等操作，返回度量的当前值。 update_ op是执行上述聚合步骤以及返回度量值的操作。 mae_ value_ op, mae_ update _op = slim.metrics.streaming_mean_absolute_error( predictions, labels ) ","date":"2020-03-12","objectID":"/en/face04/:7:7","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.8 slim ecaluation TF-Slim提供一个评估模块evaluation.py，其中包含用于使用metric_ ops.py模块中的指标编写模型评估脚本的帮助 slim.evaluation.evaluation_1oop( 'local', checkpoint_dir, 1og_dir, num_evals=num batches, eval_op=names_to_updates.values(), summary_op=tf.summary.merge(summary_ops), eval_interval secs=eval_interval_secs) 函数: evaluation_ loop、evaluation once ","date":"2020-03-12","objectID":"/en/face04/:7:8","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"7.9 slim data slim.data包 下面有很多对数据的操作方法 在slim._init_中有如下几种: from tensorflow.contrib.slim.python.slim.data import data_decoder from tensorflow.contrib.slim.python.slim.data import data_provider from tensorflow.contrib.slim.python.slim.data import dataset from tensorflow.contrib.slim.python.slim.data import dataset_data_provider from tensorflow.contrib.slim.python.slim.data import parallel_reader from tensorflow.contrib.slim.python.slim.data import prefetch_queue from tensorflow.contrib.slim.python.slim.data import tfexample_decoder ","date":"2020-03-12","objectID":"/en/face04/:7:9","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"8 TensorFlow常见的数据增强方法 ","date":"2020-03-12","objectID":"/en/face04/:8:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"8.1 tf.image库进行数据增强 颜色扰动(亮度、对比度、HSV、 RGB等) 裁剪/Pad 噪声/模糊 翻转/旋转(空间几何变换/放射变换) Draw Boxes 标准化 ","date":"2020-03-12","objectID":"/en/face04/:8:1","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"8.2 其他数据增强的方法 Mixup Oversampling 锐化/浮雕/灰度 边界检测 超像素 255-V \"\"\"图像亮度[-1, 1]\"\"\" # img_data = tf.image.adjust_brightness(img_data, delta=-.7) \"\"\"随机图像亮度\"\"\" # img_data = tf.image.random_brightness(img_data, max_delta=0.6) \"\"\"随机对比度\"\"\" # img_data = tf.image.random_contrast(img.data, lower=0, upper=4) \"\"\"随机色调\"\"\" # img_data = tf.image.random_hue(img. data, 0.5) \"\"\"随机饱和度\"\"\" # img_data = tf.image.random_saturation(img_data, lower=0, upper=2) \"\"\"图片标准化 (x-mean) / max(stddev, 1.0/sqrt(image.NumElements()))\"\"\" # img_data = tf.image.per_image_standardization( img.data) ","date":"2020-03-12","objectID":"/en/face04/:8:2","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"9 Tensorboard使用介绍 ","date":"2020-03-12","objectID":"/en/face04/:9:0","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"9.1 Tensorboard可以进行网络可视化/训练中间结果可视化 pip3 install tensorboard tensorboard --logdir logs #Scalars/Graph/lmage/Histogram/Distributions ","date":"2020-03-12","objectID":"/en/face04/:9:1","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"9.2 tf.summary writer = tf.summary.FileWriter(\"logs/\", sess.graph) tf.summary.histogram'bias',bias) tf.summary.scalar('loss',loss) tf.summary.image( 'image',image) merged = tf.summary.merge_all() rs=sess.run(merged) writer.add_summary(rs,step) ","date":"2020-03-12","objectID":"/en/face04/:9:2","tags":["FaceRecognition","TensorFlow"],"title":"TensorFlow基础串讲","uri":"/en/face04/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 卷积神经网基础串讲","date":"2020-03-12","objectID":"/en/face03/","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 卷积神经网基础串讲 ","date":"2020-03-12","objectID":"/en/face03/:0:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"1 卷积神经网发展历程与基本概念 ","date":"2020-03-12","objectID":"/en/face03/:1:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"1.1 什么是卷积神经网 笔记 以卷积结构为主，搭建起来的深度网络 将图片作为网络的输入，自动提取特征，并对图片的变形（如平移、比例缩放、倾斜）等具有高度不变形 ","date":"2020-03-12","objectID":"/en/face03/:1:1","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2 卷积神经网络的重要组成单元 ","date":"2020-03-12","objectID":"/en/face03/:2:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.1 卷积 2.1.1 基本定义 笔记 基本定义：对图像和滤波矩阵做内积（逐个元素相乘再求和）的操作 滤波器 每一种卷积对应一种特征 lm2col实现卷积运算 2.1.2 卷集中的重要参数 1. 卷积核 最常用为2D卷积核（k_w * k_h） 权重和偏置项 常用卷积核：1*1、3*3、5*5 保护位置信息 padding时对称 2. 卷积 权值共享与局部连接（局部感受野/局部感知） 卷积运算作用在局部 Feature map使用同一个卷积核运算后得到一种特征 多种特征采用多个卷积核（channel） 3. 卷积核与感受野 如何计算卷积参数量？（Parameters） ( k_w * k_h * In_channel + 1 ) * Out_channel 如何计算卷积的计算量？（FLOPs） In_w * In_h * ( k_w * k_h * In_channel + 1 ) * Out_channel 4. 步长 下采样过程 输出 Feature Map 的大小如何变化？ 参数量和计算量？ 5. Pad 确保Feature Map整数倍变化，对尺度相关的任务尤为重要 参数量和计算量？ 2.1.3 卷积的定义与使用（caffe） layer{ name:\"conv1\" type:\"Convolution\" bottom:\"data\" top:\"conv1\" param{} convolution_param{} } param{ lr_mult:1 //weight } param{ lr_mult:2 //bias } convlolution_param{ num_output:20 kernel_size:5 stride:1 weight_filler{ type:\"xavier\"} bias_filler{ type:\"constant\"} } 2.1.4 卷积的定义与使用（TensorFlow） filter_weight = tf.get_variable('weight',[5,5,3,16], initializer = tf.truncated_normal_initializer(stddev=0.1)) biases = ft.get_variable('biases',[16],initializer = tf.constant_initializer(0.1)) conv = tf.nn.conv2d(input,filter_weight,strides=[1,1,1,1],padding='SAME') bias = tf.nn.bias_add(conv,biases) net = slim.conv2d(input_x,64,[3,3],scope='conv1_1') ","date":"2020-03-12","objectID":"/en/face03/:2:1","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.2 池化 2.2.1 基本定义 笔记 基本定义：对输入的特征图进行压缩 使特征图变小，简化网络计算复杂度 进行特征压缩，提取主要特征 增大感受野 2.2.2 常见的池化策略 最大池化（Max Pooling） 平均池化（Average Pooling） 随机池化（Stochastic Pooling） ","date":"2020-03-12","objectID":"/en/face03/:2:2","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.3 激活 2.3.1 基本定义 笔记 基本概念：增加网络的非线性，进而提升网络的表达能力 非线性 单调性 可微性 取值范围 Sigmoid、Tanh、ReLU、ELU、Maxout、Softplus、Softsign 2.3.2 Sigmoid 梯度弥散/梯度饱和 指数运算 输出不是以零为中心 2.3.3 Tanh 双曲正切函数（Tanh） 完全可微分的，反对称，对称中心在原点 指数运算 2.3.4 ReLU 修正线性单元（Rectified Linear Unit，ReLU） 保留了step函数的生物学启发（只有输入超出阈值时神经元才激活） 函数形式简单，正数时不存在梯度饱和 一旦输入到了负数，ReLU就会死掉 ","date":"2020-03-12","objectID":"/en/face03/:2:3","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.4 BN（BatchNorm） 2.4.1 基本概念 笔记 基本概念：通过一定的规范化手段，把每层神经网络任意神经元这个输入值的分布强行拉回到均值为0方差为1的标准正态分布 2.4.2 BatchNorm层优点 减少了参数的人为选择，可以取消Dropout和L2正则项参数，或者采取更小的L2正则项约束参数； 减少了对学习率的要求 可以不再使用局部响应归一化，BN本身就是归一化网络（局部响应归一化——AlexNet）； 破坏原来的数据分布，一定程度上缓和过拟合。 2.4.3 BatchNorm层使用 在Caffe中使用BN层需要注意： 要配合Scale层一起使用 训练时use_global_stats设置为 false 测试时user_global_stats设置为 true layer{ bottom:\"conv1\" top:\"conv1\" name:\"bn_conv1\" type:\"BatchNorm\" batch_norm_param{ use_global_stats:true } } ","date":"2020-03-12","objectID":"/en/face03/:2:4","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.5 全连接层（Fully Connected Layer） 连接所有的特征，将输出值分送给分类器（softmax分类器） 将网络的输出变成一个向量 可以采用卷积替代全连接层 全连接层是尺度敏感的 配合使用dropout层 ","date":"2020-03-12","objectID":"/en/face03/:2:5","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.6 Dropout层 在训练过程中，随机的丢弃一部分输入，此时丢弃部分对应的参数不会更新 数据过拟合问题 取平均的作用 减少神经元之间复杂的共适应关系 ","date":"2020-03-12","objectID":"/en/face03/:2:6","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"2.7 损失层（LOSS） 2.7.1 损失函数 损失函数：用来评估模型的预测值和真实值的不一致程度。 经验风险小 结构风险小 交叉熵损失、softmax loss等 2.7.2 损失层 损失层定义了使用的损失函数，通过最小化损失来驱动网络的训练 网络的损失通过前项操作计算 网络参数相对于损失函数的梯度则通过反向操作计算 分类任务损失：交叉熵损失 回归任务损失：L1损失、L2损失 2.7.3 交叉熵损失 log-likelihood cost 非负性 当真实输出a与期望输出y接近的时候，代价函数接近于0 # 交叉熵损失实现 tf.nn.softmax_cross_entrpoy_with_logits(_sentinel=None,labels=None, logits=None,dim=-1,name=None) tf.nn.sparse_softmax_cross_entrpoy_with_logits(_sentinel=None,labels=None, logits=None,name=None) L1、L2、Smooth L1损失 Smooth L1是L1的变形，用于Faster RCNN、SSD等网络计算损失 ","date":"2020-03-12","objectID":"/en/face03/:2:7","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3 常见的卷积神经网结构 ","date":"2020-03-12","objectID":"/en/face03/:3:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3.1 LeNet 麻雀虽小五脏俱全 1998年，LeCun提出 用于解决手写数字识别，MNIST ","date":"2020-03-12","objectID":"/en/face03/:3:1","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3.2 AlexNet 3.2.1 概念 2012年，Hinton的学生Alex Krizhevsky 做出DeepLearning模型。 con - relu - pooling - LRN fc - relu - dropout fc - softmax 参数量60M以上 模型大小\u003e200M 3.2.2 AlexNet的特点 ReLU非线性激活函数 Dropout层防止过拟合 数据增强，减少过拟合 标准化层（Local Response Normalization） 3.2.3 AlexNet的意义 证明了CNN在复杂模型下的有效性 GPU实现使得训练在可接受的时间范围内得到结果 ","date":"2020-03-12","objectID":"/en/face03/:3:2","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3.3 ZFNet 在AlexNet基础上进行细节调整，并取得2013年ILSVA的冠军 从可视化的角度出发，解释CNN有非常好的性能的原因 ZFNet与特征可视化 特征分层次体系结构 深层特征更鲁棒 深层特征更有区分度 深层特征收敛更慢 …… ","date":"2020-03-12","objectID":"/en/face03/:3:3","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3.4 VGGNet 3.4.1 概念 由牛津大学计算机视觉组和Google Deepmind共同设计 为了研究网络深度对模型准确度的影响，并采用小卷积堆叠的方式来搭建整个网络结构 参数量：138M 模型大小\u003e500M 3.4.2 VGGNet的特点 更深的网络结构，结构更加规整、简单； 全部使用33的小型卷积核和22的最大池化层 每次池化后Feature Map宽高降低一半，通道数量增加一倍； 网络层数更多、结构更深，模型参数量更大。 3.4.3 VGGNet的意义 证明了更深的网络，能够提取更好的特征 成为后续很多网络的backbone 规范化了后续网络设计的思路 ","date":"2020-03-12","objectID":"/en/face03/:3:4","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3.5 GoogLeNet/Inception v1 3.5.1 概念 在设计网络结构时，不仅强调网络的深度，也会考虑网络的宽度，并将这种结构定义为Inception结构（一种网中网（Network In Network）的结构，及原来的结点也是一个网络） 证明了用更多的卷积，更深的层次可以得到更好的结构 参数量6.8M 模型大小50M 3.5.2 GoogLeNet/Inception v1特点 更深的网络结构 两个LOSS层，降低过拟合风险 考虑网络宽度 巧妙地利用1*1的卷积核来进行通道降维，减小计算量 3.5.3 从卷积的角度思考，如何减少网络中的计算量？ 小卷积核来对大卷积核进行拆分 Stride = 2代替pooling层 巧妙地利用1*1的卷积核来进行 ","date":"2020-03-12","objectID":"/en/face03/:3:5","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"3.6 ResNet 3.6.1 概念 2015年，由何凯明团队提出，引入跳连的结构来防止梯度消失的问题，进而可以进一步加大网络深度。 3.6.2 ResNet中的Bootleneck与恒等映射 Bootleneck：跳连结构（Short-Cut）恒等映射，解决梯度消失问题； 3.6.3 ResNet中的BatchNorm 每个卷积之后都会配合一个BatchNorm层 对数据scale和分布来进行约束 简单的正则化，提高网络抗过拟合能力 3.6.4 ResNet的设计特点 核心单元简单堆叠 跳连结构解决网络梯度消失问题 Average Pooling层代替FC层 BN层加快网络训练速度和收敛时的稳定性 加大网络深度，提高模型特征提取能力 3.6.5 ResNet的变种网络 ResNetXt 分组卷积 DenseNet 更多的跳连 Wide-ResNet 加大网络宽度 ResNet In ResNet 网中网 Inception-ResNet Inception结构 ","date":"2020-03-12","objectID":"/en/face03/:3:6","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"4 轻量型卷积神经网 笔记 更少的参数量 更少的计算量 移动端、嵌入式平台 ","date":"2020-03-12","objectID":"/en/face03/:4:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"4.1 SqueezeNet LCLR-2017，作者分别来自Berkeley和Stanford 提出 Fire Module，由两部分组成：Squeeze 层 + Expand层 SqueezeNet的特点 1*1卷积核减小计算量 不同size的卷积核，类似Inception deep compression技术 ","date":"2020-03-12","objectID":"/en/face03/:4:1","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"4.2 MobileNet V1/V2 由Google团队提出，并发表于CVPR-2017 Depth-wise Separable Convolution 的卷积方式代替传统卷积方式，以达到减少网络权值参数的目的。 MobileNet 网络设计思想 Depth-wise Convolution Point-wise Convolution MobileNet V2 Inverted residuals（倒置残差） Linear bottlenecks ","date":"2020-03-12","objectID":"/en/face03/:4:2","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"4.3 ShuffleNet V1/V2 ShuffleNet V1由旷视科技提出的一种轻量型卷积网络 深度卷积来代替标准卷积 分组卷积+通道shuffle ShuffleNet V2旷视科技针对ShuffleNet V1改进的轻量型卷积神经网 ECCV 2018 该模型最大的贡献点在于解释了如何去设计轻量型卷积网络的几个标准和规范 笔记 轻量型卷积神经网设计标准 相同的通道宽度可最小化内存访问成本（MAC） 过度的组卷积会增加MAC 网络碎片化（例如GoogleNet的多路径结构）会降低并行度 元素级运算不可忽视 ","date":"2020-03-12","objectID":"/en/face03/:4:3","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"4.4 Xception 由Google提出，arXiv的V1版本于2016年10月公开 同样借鉴了深度卷积的思想，但又存在差异，具体如下： Xception先采用1*1卷积，再进行主通道卷积； Xception再1*1卷积后，加入ReLU； ","date":"2020-03-12","objectID":"/en/face03/:4:4","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"5 多分支卷积神经网络 ","date":"2020-03-12","objectID":"/en/face03/:5:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"5.1 Siamese Net 孪生网络 余弦距离 余弦距离，也称余弦相似度，是用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异大小的度量 余弦距离——拓展Loss Center Loss SphereFace CosFace ArcFace CCL AMSoftmax 度量问题 分类问题 回归问题 度量问题 相似度 排序问题 ","date":"2020-03-12","objectID":"/en/face03/:5:1","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"5.2 Troplet Net Anchor + Negative + Positive Troplet Net 网络结构 Troplet Net 网络特点 提取Embedding Feature 细粒度的识别任务 正负样本比例失衡——难例挖掘 ","date":"2020-03-12","objectID":"/en/face03/:5:2","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"5.3 Quadruplet Net 相比Troplet Net 多加入一张负样本 正度样本之间的绝对距离 ","date":"2020-03-12","objectID":"/en/face03/:5:3","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"5.4 多任务网络 ","date":"2020-03-12","objectID":"/en/face03/:5:4","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"6 卷积神经网中的Attention机制 笔记 人类大脑在接受和处理外界信号时的一种机制 one-hot分布或者soft的软分布 Soft-Attention或者Hard-Attention Attention实现机制： 保留所有分量均做加权（即soft attention） 在分布中以某种采样策略选取部分分量（即hard attention） 原图、特征图、空间尺度、通道、特征图上的每个元素、不同历史时刻 ResNet + Attention SENet/Channel Attention ","date":"2020-03-12","objectID":"/en/face03/:6:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"7 模型压缩 笔记 学院派VS工程派 学院派注重精度 工程派注重精度与效率的结合 ","date":"2020-03-12","objectID":"/en/face03/:7:0","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"7.1 模型剪枝 除无意义的权重和激活来减少模型的大小 贡献度排序 去除小贡献度单元 重新fine-tuning 模型剪枝技巧 全连接部分通常会存在大量的参数冗余 对卷积窗口进行剪枝的方式，可以使减少卷积窗口权重，或者直接丢弃掉卷积窗口的某一维度； 丢弃稀疏的卷积窗口，但这并不会使模型运行速度有数量级的提升； 首先训练一个较大的神经网络模型，在逐步剪枝得到的小模型。 ","date":"2020-03-12","objectID":"/en/face03/:7:1","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"7.2 模型量化/定点化 减少数据在内存中的位数操作，可以采用8位类型来表示32位浮点（定点化）或者直接训练低于8位的模型，比如：2bit模型、4bit模型等 较少内存开销，节省更多的带宽 对于某些定点运算方式，甚至可以消除乘法操作，只剩加法操作，某些二值模型，直接使用位操作 代价通常是位数越低，精度下降越明显 在TensorFlow中，通常采用引入量化层的方式来更改计算图，进而达到量化的目的。 ","date":"2020-03-12","objectID":"/en/face03/:7:2","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"7.3 知识蒸馏（Knowledge Distillation） 采用一个大的、复杂的网络模型来指导一个小的、精简之后的网络模型进行模型训练和学习 ","date":"2020-03-12","objectID":"/en/face03/:7:3","tags":["FaceRecognition","CNN"],"title":"卷积神经网基础串讲","uri":"/en/face03/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 深度学习基础串讲","date":"2020-03-12","objectID":"/en/face02/","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"基于TensorFlow的人脸识别智能小程序的设计与实现 深度学习基础串讲 ","date":"2020-03-12","objectID":"/en/face02/:0:0","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"1 内容概况（卷积神经网） ","date":"2020-03-12","objectID":"/en/face02/:1:0","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"2 深度学习相关概念 ","date":"2020-03-12","objectID":"/en/face02/:2:0","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"2.1 深度学习发展历程 ","date":"2020-03-12","objectID":"/en/face02/:2:1","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"2.2 人工神经网络 ","date":"2020-03-12","objectID":"/en/face02/:2:2","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"2.3 感知器 多层感知器（MLP）也叫人工神经网络（ANN） ","date":"2020-03-12","objectID":"/en/face02/:2:3","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"2.4 深度学习 含多隐层的多层感知器就是一种深度学习结构 ","date":"2020-03-12","objectID":"/en/face02/:2:4","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"2.5 神经元 -\u003e 感知器 -\u003e 神经网络 -\u003e 深度学习 多层感知器 -\u003e 神经网络 多隐层的多层感知器 -\u003e 深度学习 ","date":"2020-03-12","objectID":"/en/face02/:2:5","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"3 深度学习相关理论 ","date":"2020-03-12","objectID":"/en/face02/:3:0","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"3.1 深度学习中的核心知识 3.1.1 前向运算（怎么用？） 计算输出值得过程称为前向运算 3.1.2 反向传播（怎么学？） 1. 神经网络（参数模型）训练方法 1986年由Rumelhar和Hinton等人提出 解决神经网络优化问题 计算输出层结果与真实值之间的偏差来进行逐层调节参数 2. 神经网络参数训练是一个不断迭代的过程 3. 参数更新多少？ 参数优化的问题 导数和学习率 3.1.3 梯度下降算法 沿着导数下降的方法，进行参数更新 选择合适的步长/学习率 局部最优解 ","date":"2020-03-12","objectID":"/en/face02/:3:1","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"3.2 深度学习发展迅猛的原因 数据：imageNet 算力：GPU+深度学习芯片 算法：分类、检测、分割等 ","date":"2020-03-12","objectID":"/en/face02/:3:2","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["FaceRecognition"],"content":"4 常见的深度学习模型 卷积神经网（CNN） 循环神经网（RNN） 自动编码机（Autoencoder） Restricted Boltzmann Machines（RBM，受限玻尔兹曼机） 深度信念网络（DBN，Deep Belief Network） ","date":"2020-03-12","objectID":"/en/face02/:4:0","tags":["FaceRecognition","DeepLearning"],"title":"深度学习基础串讲","uri":"/en/face02/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装中文输入法","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装中文输入法. 系统环境 Ubuntu 16.04 ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:0:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"1 安装Fcitx 配置 System Settings -\u003e Language Support -\u003e Install/Remove Languages 选择 Chinese(simplified) -\u003e Apply ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:1:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"2 重启系统 reboot ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:2:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"3 设置输入法为Fcitx 配置 System Settings -\u003e Language Support -\u003e Keaboard input method system 选择 fcitx -\u003e close ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:3:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"4 重启系统 ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:4:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"5 右上角出现企鹅 配置 点击企鹅 -\u003e ConfigureFcitx -\u003e 点击左下角\"+\" -\u003e 取消勾选 Only Show Current Language 点击 Sunpinyin -\u003e OK ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:5:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"6 参考资料 参考资料 https://blog.csdn.net/qq_38329375/article/details/81538443 ","date":"2020-03-12","objectID":"/en/ubuntu-fcitx/:6:0","tags":["Ubuntu16.04","Fcitx","中文输入法"],"title":"Ubuntu16.04安装中文输入法","uri":"/en/ubuntu-fcitx/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装Pycharm","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装Pycharm并进行基本配置. 系统环境 Ubuntu 16.04 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:0:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"1 下载 在pycharm官网下载所需版本: https://www.jetbrains.com/pycharm/download/#section=linux 建议下载专业版 将下载得到的安装包移动到Home文件夹下 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:1:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"2 解压 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:2:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"2.1打开终端，输入解压指令 tar -zxvf pycharm-2019.3.3.tar.gz ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:2:1","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"2.2 得到解压后的文件pycharm-2019.3.3 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:2:2","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"3 启动 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:3:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"3.1 运行pycharm.sh # 进入 pycharm-2019.3.3/bin 目录下 运行pycharm.sh cd pycharm-2019.3.3/bin sh pycharm.sh ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:3:1","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"3.2 进行激活等配置后进入软件 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:3:2","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"4 配置 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:4:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"4.1 调出pycharm顶部菜单栏 配置 按Ctrl + Shift + A打开Find Action对话框，键入Experimental features，然后按Enter键。 取消linux.native.menu选项旁边的复选框，应用更改并关闭对话框。 重启PyCharm ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:4:1","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"4.2 将pycharm固定到系统桌面菜单栏 配置 顶部菜单栏-\u003etools-\u003eCreate Desktop Entry… ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:4:2","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"5 完成 基本配置结束，下次直接双击桌面图标即可启动！ ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:5:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"6 参考资料 参考资料 https://blog.csdn.net/shuiyixin/article/details/89530415 https://blog.csdn.net/loco1223/article/details/91127366 https://blog.csdn.net/Boogyman/article/details/100527532 https://blog.csdn.net/qq_42517220/article/details/86756538 ","date":"2020-03-12","objectID":"/en/ubuntu-pycharm/:6:0","tags":["Ubuntu16.04","Pycharm"],"title":"Ubuntu16.04安装pycharm","uri":"/en/ubuntu-pycharm/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装Python3.5","date":"2020-03-12","objectID":"/en/ubuntu-python/","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何在Ubuntu16.04系统中安装Python3.5并将python3.5设置为默认版本. 系统环境 Ubuntu 16.04 原始python版本 python2.7 安装python版本 python3.5 ","date":"2020-03-12","objectID":"/en/ubuntu-python/:0:0","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"1 ubuntu安装Python3.5 sudo add-apt-repository ppa:fkrull/deadsnakes sudo apt-get update #检查系统更新 sudo apt-get install python3.5 python --version #查看当前版本号 sudo apt-get install python3-pip #装pip3 ","date":"2020-03-12","objectID":"/en/ubuntu-python/:1:0","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"2 设置python3为默认版本 ","date":"2020-03-12","objectID":"/en/ubuntu-python/:2:0","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"2.1 执行命令 sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100 sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150 ","date":"2020-03-12","objectID":"/en/ubuntu-python/:2:1","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"2.2 如果要切换回 python2 sudo update-alternatives --config python #按照提示输入选择数字回车即可 ","date":"2020-03-12","objectID":"/en/ubuntu-python/:2:2","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"3 参考资料 参考资料 https://blog.csdn.net/qq_36801146/article/details/89380491 ","date":"2020-03-12","objectID":"/en/ubuntu-python/:3:0","tags":["Ubuntu16.04","Python3.5"],"title":"Ubuntu16.04安装Python3.5","uri":"/en/ubuntu-python/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何解决ubuntu16.04安装桌面后只能访客登录的方法","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"这篇文章展示了如何解决ubuntu16.04安装桌面后只能访客登录的方法. 系统环境 Ubuntu 16.04 Aliyun Workbench Aliyun VNC Warning 图形化桌面安装好后，远程连接进去，发现只能使用guest帐号，不能选择其他用户 登录进去有警告信息！ ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:0:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"1 连接Terminal 通过云服务器管理控制台的Workbench连接Terminal ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:1:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"2 修改root权限 修改/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf文件 vim /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:2:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"修改前 [Seat:*] user-session=ubuntu ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:2:1","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"修改后 [Seat:*] user-session=ubuntu greeter-show-manual-login=true allow-guest=false ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:2:2","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"3 重启服务器 reboot ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:3:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"4 关闭警告信息 重启之后就可以用root用户登录，登录后还是有警告 ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:4:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"修改/root/.profile文件 修改前 # ~/.profile: executed by Bourne-compatible login shells. if [ \"$BASH\" ]; then if [ -f ~/.bashrc ]; then . ~/.bashrc fi fi mesg n || true 修改后 # ~/.profile: executed by Bourne-compatible login shells. if [ \"$BASH\" ]; then if [ -f ~/.bashrc ]; then . ~/.bashrc fi fi tty -s \u0026\u0026 mesg n || true ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:4:1","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"5 重启服务器 reboot ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:5:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"6 完成 重启之后，只有root用户，登录后也没有警告信息 ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:6:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"7 参考资料 参考资料 https://blog.csdn.net/Never_Give_up_z/article/details/83190285 ","date":"2020-03-12","objectID":"/en/ubuntu-only-guest/:7:0","tags":["Ubuntu16.04"],"title":"Ubuntu16.04安装桌面后只能访客登录","uri":"/en/ubuntu-only-guest/"},{"categories":["Ubuntu"],"content":"这篇文章展示了通过VNCViewer远程控制阿里云ECS服务器的安装配置操作","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"这篇文章展示了通过VNCViewer远程控制阿里云ECS服务器的安装配置操作. 系统环境 桌面端版本：Windows 10 远程端版本：Ubuntu 16.04 VNCViewer版本：6.20.113 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:0:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"1 安装配置好服务器 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:1:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"2 添加安全组 为阿里云ECS添加安全组 安全组 协议类型：自定义TCP 端口范围：5900/59001 授权对象：0.0.0.0/0 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:2:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"3 连接Terminal 通过自带的Workbench连接Terminal ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:3:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"4 安装VNCServer ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:4:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"4.1 更新系统软件 sudo apt-get update ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:4:1","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"4.2 安装vnc4server sudo apt-get install vnc4server # 中间会有确认安装的提示，输入 Y 确认安装 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:4:2","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"4.3 启动vncserver vncserver # 第一次启动会提示设置密码（19981112） ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:4:3","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"5 安装Ubuntu gnome界面 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:5:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"5.1 安装 x-windows 的基础 sudo apt-get install x-window-system-core ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:5:1","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"5.2 安装登录管理器 sudo apt-get install gdm # 选择lightdm ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:5:2","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"5.3 安装Ubuntu界面程序 sudo apt-get install ubuntu-desktop ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:5:3","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"5.4 安装Ubuntu界面其他依赖 sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:5:4","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"6 修改 ~/.vnc/xstartup\\ vim ~/.vnc/xstartup #用vim进行编辑 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:6:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"修改前 #!/bin/sh # Uncomment the following two lines for normal desktop: # unset SESSION_MANAGER # exec /etc/X11/xinit/xinitrc [ -x /etc/vnc/xstartup ] \u0026\u0026 exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] \u0026\u0026 xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic \u0026 #x-terminal-emulator -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" \u0026 x-window-manager \u0026 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:6:1","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"修改后 #!/bin/sh # Uncomment the following two lines for normal desktop: export XKL_XMODMAP_DISABLE=1 unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS # exec /etc/X11/xinit/xinitrc [ -x /etc/vnc/xstartup ] \u0026\u0026 exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] \u0026\u0026 xrdb $HOME/.Xresources xsetroot -solid grey vncconfig -iconic \u0026 #x-terminal-emulator -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" \u0026 # x-window-manager \u0026 gnome-session \u0026 gnome-panel \u0026 gnome-settings-daemon \u0026 metacity \u0026 nautilus \u0026 gnome-terminal \u0026 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:6:2","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"7 启动vncserver Tip 自动生成新桌面 第一次生成:1 第二次生成:2 表示不同的桌面 vncviewer ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:7:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"8 关闭生成的桌面 vncserver -kill :1 #:1表示桌面号 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:8:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"9 使用vnc工具连接 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:9:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"9.1 在官网下载VNCViewer ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:9:1","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"9.2 创建新的连接 创建新链接 File -\u003e New connection 在VNC Server中输入IP:桌面号39.105.95.4:1 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:9:2","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Ubuntu"],"content":"10 参考资料 参考资料 https://www.jianshu.com/p/a4c99712a2b4 https://blog.csdn.net/u012435142/article/details/82261586 ","date":"2020-03-12","objectID":"/en/vncviever-aliyun-ecs/:10:0","tags":["VNCViewer","Ubuntu16.04","aliyun"],"title":"VNCViewer远程阿里云ECS服务器","uri":"/en/vncviever-aliyun-ecs/"},{"categories":["Github"],"content":"这篇文章介绍了如何在windows系统上基于github.io利用hugo搭建自己的个人博客。","date":"2020-03-11","objectID":"/en/github-build/","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"这篇文章介绍了如何在windows系统上基于github.io利用hugo搭建自己的个人博客。 系统环境 Windows 10 hugo_extended_0.68.3_Windows-64bit ","date":"2020-03-11","objectID":"/en/github-build/:0:0","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"1 git 下载地址：https://git-scm.com/downloads 按步骤安装即可 ","date":"2020-03-11","objectID":"/en/github-build/:1:0","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"2 hugo ","date":"2020-03-11","objectID":"/en/github-build/:2:0","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"2.1 下载 下载地址：https://github.com/gohugoio/hugo/releases 由于使用主题的限制，我使用的版本是:hugo_extended_0.68.3_Windows-64bit ","date":"2020-03-11","objectID":"/en/github-build/:2:1","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"2.2 配置 创建文件夹 D:\\hugo\\bin 将解压后的hugo.exe放到新建的 D:\\hugo\\bin 目录下 配置系统环境变量。 将 D:\\hugo\\bin 加到 path 中 检查配置是否成功 进入cmd $ hugo version 显示下面的信息即表示安装成功 Hugo Static Site Generator v0.67.0-7F1DA3EF windows/386 BuildDate: 2020-03-09T20:37:49Z ","date":"2020-03-11","objectID":"/en/github-build/:2:2","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"2.3 生成站点 进入D:\\hugo\\下，单机鼠标右键选择 Git Bash Here $ hugo new site 文件名称（如 blog） 执行后，在hugo目录下会生成一个blog站点文件夹，目录结构如下： ├── archetypes ├── content ├── data ├── layouts ├── static ├── themes ├── config.toml 笔记 archetypes：存放default.md，头文件格式，每次新建文章默认显示的头部信息在此修改 content：存放博客文章，markdown格式文件 data：存放自定义或者导入的模板 layouts：存放网站的数据模板 static：存放图片、css、js等静态资源 themes：存放主题文件，每个主题都是一个独立的文件夹 config.toml：网站配置文件 ","date":"2020-03-11","objectID":"/en/github-build/:2:3","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"2.4 创建文章 进入站点根目录即D:\\hugo\\blog下，执行命令 $ hugo new post/test.md 执行后，会自动在content/post下生成test.md文件，打开可编辑内容 文件头部的draft要改为false，这样部署后才能看到文章。 当前网站是没有任何内容的，需要下载个主题。 ","date":"2020-03-11","objectID":"/en/github-build/:2:4","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"2.5 下载主题 主题下载地址：https://themes.gohugo.io 将下载好的主题解压后放到themes文件夹下 根据主题的说明进行相关配置（每个主题不一样，不做详细说明） 主题需要在config.toml中指定，如：theme = “LoveIt” 进入站点根目录即D:\\hugo\\blog下，执行命令启动服务 $ hugo server 执行结果： Building sites … | EN | ZH-CN -------------------+-----+-------- Pages | 116 | 116 Paginator pages | 4 | 4 Non-page files | 0 | 0 Static files | 217 | 217 Processed images | 0 | 0 Aliases | 35 | 34 Sitemaps | 2 | 1 Cleaned | 0 | 0 Built in 455 ms Watching for changes in D:\\hugo\\blog\\{archetypes,content,data,layouts,themes} Watching for config changes in D:\\hugo\\blog\\config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 访问http://localhost:1313/或http://127.0.0.1:1313/查看效果 ","date":"2020-03-11","objectID":"/en/github-build/:2:5","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"3 部署到github pages ","date":"2020-03-11","objectID":"/en/github-build/:3:0","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"3.1 创建github.io仓库 登录github，点击左上角的New 创建 github.io 仓库，图中的 yourname 要与成自己的github用户名一致，即上图中 Owner 显示的用户名。 最后点击 Creat repository 完成创建 ","date":"2020-03-11","objectID":"/en/github-build/:3:1","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"3.2 编译 将站点根目录config.toml中 baseURL 换成自己建立的仓库，如 baseURL = \"https://yourname.github.io/\" 进入站点根目录即D:\\hugo\\blog下，执行编译命令： $ hugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即 Hugo 生成的整个静态网站。每次更新内容后，将 pubilc 目录里所有文件 push 到 GitHub 即可。 ","date":"2020-03-11","objectID":"/en/github-build/:3:2","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"3.3 部署 进入D:\\hugo\\blog\\public 首次使用执行以下命令： $ git init $ git remote add origin https://github.com/yourname/yourname.github.io.git 将本地目录链接到远程服务器的代码仓库 $ git add -A $ git commit -m \"first commit\" $ git push -u origin master 等待上传完成，就可以去 yournamne.github.io 看自己的博客了 我的博客地址：https://ieblyang.github.io/，欢迎交流学习！ ","date":"2020-03-11","objectID":"/en/github-build/:3:3","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"3.4 更新 以后每次站点根目录下执行hugo命令后，再到public下执行推送命令： $ git add -A $ git commit -m \"修改内容\" $ git push -u origin master (会有弹窗提示，需要登录自己的github账号) ","date":"2020-03-11","objectID":"/en/github-build/:3:4","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":["Github"],"content":"4 总结 整体来说并不复杂，最容易出问题的地方在“主题配置”部分，一定要按照主题作者的说明文档一步一步来，不是下载好放到themes文件夹下就算完成了，我使用的主题是 LoveIt ，推荐你使用！ ","date":"2020-03-11","objectID":"/en/github-build/:4:0","tags":["Github","Hugo","Windows"],"title":"Windows+Hugo+Github搭建个人博客","uri":"/en/github-build/"},{"categories":null,"content":"Profile Name：Bolon Young School：Zhengzhou Universtity Major：Software Engineering Programming Language：Java、Python、C、Scratch Specialisation：Java Web、Deep Learning Speciality：Video Post、photography、After Effects、Premiere、Photoshop … Blog details Technical Support： Technical Support： Theme：LoveIt Contact QQ：1030007324 Mail：bolon.young@gmail.com TEL:15686961205 Bilibili：我家住这颗菠萝 ","date":"2020-03-11","objectID":"/en/about/:0:0","tags":null,"title":"About","uri":"/en/about/"}]